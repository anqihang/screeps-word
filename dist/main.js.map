{"version":3,"file":"main.js","sources":["../src/base/harvest.js","../src/role/role.harvester.js","../src/base/withdraw.js","../src/role/role.builder.js","../src/role/role.upgrader.js","../src/util/assignTarget.js","../src/role/role.repairer.js","../src/role/role.carrier.js","../src/role/role.customer.js","../src/role/role.mineral.harvester.js","../src/role/role.attacker.js","../src/exploit/exploit_attack.js","../src/role/role.claimer.js","../src/Temporary/outHarvester.js","../src/Temporary/H_Cer.js","../src/structure/structure.tower.js","../src/main.js"],"sourcesContent":["export const harvest = {\r\n\r\n    /** \r\n     * @param {Object} _creep (必填)\r\n     * @param {Number} energy_index energy矿的序号 (选填)\r\n     * @param {Array} _target energy矿或mineral矿数组 (必填)\r\n     * @returns {Boolean}\r\n    */\r\n    // harvesting: true,\r\n    run: function ({ _creep, energy_index = 0, _target }) {\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n            //从工作状态到不工作状态\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n            //从不工作状态到工作状态\r\n        }\r\n\r\n        if (!_creep.memory.working) {\r\n            if (_creep.harvest(_target[energy_index]) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_target[energy_index], { visualizePahStyle: { stroke: '#fae16b', opacity: 1 } });\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}","import { harvest } from \"../base/harvest\";\r\n\r\nexport const harvester = {\r\n    /**\r\n     * @description 采集者\r\n     * @param {Object} _creep\r\n     * @param {Object} _container 交互的container (選填)\r\n     * @param {Boolean} noCarrier 没有carrier了 (选填)\r\n     */\r\n    run: function ({ _creep, noCarrier, _container }) {\r\n        //需要energy的建筑物【arr】，并按照已有energy的递增排序---没有container时替换targets\r\n        const structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: (item) => {\r\n                return (\r\n                    (item.structureType == STRUCTURE_EXTENSION || item.structureType == STRUCTURE_SPAWN || item.structureType == STRUCTURE_TOWER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0\r\n                );\r\n            },\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n\r\n        //所有energy矿【arr】\r\n        const source_energy = _creep.room.find(FIND_SOURCES);\r\n        //creep的targetIndex\r\n        let targetIndex = _creep.memory.targetIndex;\r\n        //所采集的矿对象\r\n        let o_energy = source_energy[targetIndex];\r\n        //所采集的矿的附近的container\r\n        let container_energy = _creep.room\r\n            .lookForAtArea(LOOK_STRUCTURES, o_energy.pos.y - 2, o_energy.pos.x - 2, o_energy.pos.y + 2, o_energy.pos.x + 2, true)\r\n            .filter((item) => item.structure.structureType == \"container\");\r\n        let target = container_energy[0].structure;\r\n        //外部指定container\r\n        if (_container) {\r\n            target = _container;\r\n        }\r\n        //没有carrier后harvester开始运输\r\n        if (noCarrier) {\r\n            target = structure_energy[0];\r\n        }\r\n\r\n        //----------------------//\r\n        if (harvest.run({ _creep, _target: source_energy, energy_index: _creep.memory.targetIndex })) {\r\n            if (_creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(target, { visualizePahStyle: { stroke: \"#fae16b\", opacity: 0.6 } });\r\n            }\r\n        }\r\n    },\r\n};\r\n","\r\n//拿取energy\r\nexport const withdraw = {\r\n    /**\r\n     * @description 拿取\r\n     * @param {*} _creep \r\n     * @param {*} _container 拿取energy的目标对象 (选填)\r\n     * @param {Boolean} isStorage 是否是去storage拿能量 (选填)\r\n     * @param {*} _resource 拿取的resource种类\r\n     * @param {*} _amount 拿取的resource数量\r\n     * @returns {Boolean}\r\n     */\r\n    run: function ({ _creep, _container, _resource, _amount, isStorage }) {\r\n        /**\r\n         * @description 有energy的container建筑【arr】\r\n         * @param {Array} container_energy\r\n         */\r\n        let containers_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return item.structureType == STRUCTURE_CONTAINER && item.store.getUsedCapacity(RESOURCE_ENERGY) > 300;\r\n            }\r\n        });\r\n        /**\r\n         * @description 有k矿的container建筑【arr】\r\n         * @param {Array} containers_mineral\r\n         */\r\n        let containers_mineral = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return item.structureType == STRUCTURE_CONTAINER && (item.store.getUsedCapacity(RESOURCE_KEANIUM) > 300 || item.store.getUsedCapacity(RESOURCE_OXYGEN) > 300);\r\n            }\r\n        });\r\n\r\n        //掉落的energy【arr】\r\n        // const energy = _creep.room.find(FIND_DROPPED_RESOURCES);\r\n\r\n        /**\r\n         * @description  \r\n         * @param {boolean} noEnergy 判断container有没有energy,都没有为true\r\n         */\r\n        let noEnergy = false;//有energy为false\r\n        let noMineral = false;\r\n\r\n        noEnergy = containers_energy.every(element => {\r\n            return element.store.getUsedCapacity(RESOURCE_ENERGY) == 0;\r\n        });\r\n        //全都没有矿物为true\r\n        noMineral = containers_mineral.every(element => {\r\n            return element.store.getUsedCapacity(RESOURCE_KEANIUM) == 0 && element.store.getUsedCapacity(RESOURCE_OXYGEN) == 0;\r\n        });\r\n        // console.log(noMineral);\r\n\r\n        //判断工作状态\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n        } else if ((_creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0 && noEnergy) || ((_creep.store.getUsedCapacity(RESOURCE_KEANIUM) > 0 || _creep.store.getUsedCapacity(RESOURCE_OXYGEN) > 0) && noMineral)) {//自己身上有container没有能量\r\n            return true;\r\n            //container都空了而自身携带有一些\r\n        }\r\n\r\n        //if()\r\n        if (!_creep.memory.working) {\r\n            //customer//自定义拿取的目标\r\n            if (_container && _resource) {\r\n                if (_creep.withdraw(_container, _resource, _amount) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_container, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: 1\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //拿取掉落的energy\r\n            //#region\r\n            // if (energy.length > 0) {\r\n            //     if (_creep.pickup(energy[0]) == ERR_NOT_IN_RANGE) {\r\n            //         _creep.moveTo(energy[0])\r\n            //     }\r\n            // }\r\n            //#endregion\r\n\r\n            //container没energy后有k拿取k\r\n            if (!noMineral && _creep.memory.role == 'Carrier' && _creep.store.getFreeCapacity() > 0) {\r\n                if (_creep.withdraw(containers_mineral[0], RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers_mineral[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#906efa\",\r\n                            opacity: .3\r\n                        }\r\n                    })\r\n                }\r\n                //container没energy后有O拿取O\r\n                else if (_creep.withdraw(containers_mineral[0], RESOURCE_OXYGEN) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers_mineral[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#906efa\",\r\n                            opacity: .3\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //container有energy时拿取container的energy//10.31只有carrier能在container拿取\r\n            else if (!noEnergy && _creep.memory.role == 'Carrier' && _creep.store.getFreeCapacity() > 0) {\r\n                if (_creep.withdraw(containers_energy[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers_energy[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: .3\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            //container没有energy后拿取storage的energy(运输目标是storage时不执行，自定义resource时不执行)\r\n            //\r\n            else if (!isStorage && !_resource) {\r\n                //storage\r\n                // let storage = _creep.room.find(FIND_STRUCTURES, {\r\n                //     filter: item => item.structureType == STRUCTURE_STORAGE\r\n                // })[0];\r\n                let storage = _creep.room.storage;\r\n                // storage = Game.rooms['W41S22'].storage;\r\n                if (_creep.withdraw(storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(storage, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}","// const harvester = require('role.harvester');\r\nimport { harvest } from '../base/harvest';\r\nimport { withdraw } from '../base/withdraw';\r\nexport const builder = {\r\n    /**\r\n     * @description 建造者\r\n     * @param {*} _creep \r\n     */\r\n    run: function (_creep) {\r\n        if (_creep.room.storage.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n\r\n            if (withdraw.run({ _creep })) {\r\n                /**\r\n                 * @description 施工工地并按照所需energy的多少递增排序\r\n                 */\r\n                // let construction = _creep.room.find(FIND_MY_CONSTRUCTION_SITES);\r\n                //所有房间的施工地\r\n                let construction = {};\r\n                for (const key in Game.rooms) {\r\n                    construction[key] = [...Game.rooms[key].find(FIND_CONSTRUCTION_SITES)];\r\n                    // construction.push(...Game.rooms[key].find(FIND_CONSTRUCTION_SITES))\r\n                }\r\n                // construction = Game.rooms['W41S23'].find(FIND_CONSTRUCTION_SITES);\r\n                // construction.sort((a, b) => a.progressTotal - b.progressTotal);\r\n                if (construction[_creep.room.name].length) {\r\n                    if (_creep.build(construction[_creep.room.name][0]) == ERR_NOT_IN_RANGE) {\r\n                        _creep.moveTo(construction[_creep.room.name][0], {\r\n                            visualizePathStyle: {\r\n                                stroke: \"#23d08a\",\r\n                                opacity: .6\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (harvest.run({ _creep, _target: Game.rooms['W41S23'].find(FIND_SOURCES_ACTIVE) })) {\r\n                // console.log(_cree);\r\n                let construction = [];\r\n                for (const key in Game.rooms) {\r\n                    construction.push(...Game.rooms[key].find(FIND_CONSTRUCTION_SITES))\r\n                }\r\n                // construction = Game.rooms['W41S23'].find(FIND_CONSTRUCTION_SITES);\r\n                // construction.sort((a, b) => a.progressTotal - b.progressTotal);\r\n                if (construction.length) {\r\n                    if (_creep.build(construction[0]) == ERR_NOT_IN_RANGE) {\r\n                        _creep.moveTo(construction[0], {\r\n                            visualizePathStyle: {\r\n                                stroke: \"#23d08a\",\r\n                                opacity: .6\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n// module.exports = builder;","//升级controller\r\nimport { harvest } from '../base/harvest';\r\nimport { withdraw } from '../base/withdraw';\r\n\r\nexport const upgrader = {\r\n    run: function (_creep) {\r\n        //所有energy矿【arr】\r\n        const source_energy = _creep.room.find(FIND_SOURCES);\r\n\r\n        // if (harvest.run({ _creep, energy_index: 1, _target: source_energy })) {\r\n        //     if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n        //         _creep.moveTo(_creep.room.controller);\r\n        //     }\r\n        // }\r\n        if (withdraw.run({ _creep, _container: _creep.room.storage, _resource: RESOURCE_ENERGY })) {\r\n            if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_creep.room.controller);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// module.exports = upgrader;","\r\n//任务目标的分配，保证在完成前不会切换目标对象\r\nexport const assignTarget = {\r\n    /**\r\n     * @description 给不同的creep分配不同的目标对象\r\n     * @param {Array} targets structure_energy不working时的目标\r\n     * @param {Object} roleTarget  Memory.carryTarget目标index\r\n     * @param {Array} roleArr 相应的creep对象数组\r\n     */\r\n    run: function ({ room, roleTarget, roleArr, targets }) {\r\n        //判断目标任务是否完成一个\r\n        // if (Memory[roleTarget] != targets[0].id) {\r\n        //     Memory[roleTarget] = targets[0].id;\r\n        if (Memory.targetTask[room][roleTarget] != targets[0].id) {\r\n            Memory.targetTask[room][roleTarget] = targets[0].id;\r\n            // 只剩一个任务时\r\n            if (targets.length == 1) {\r\n                // _creep.memory.targetIndex = 0;\r\n                roleArr.forEach(element => {\r\n                    element.memory.targetIndex = 1;\r\n                });\r\n            } else {\r\n                // if (_creep == roleArr[1])\r\n                //任务超过一个后重新分配\r\n                if (roleArr.length > 1) {\r\n                    if (roleArr[0].memory.targetIndex == roleArr[1].memory.targetIndex) {\r\n                        roleArr[0].memory.targetIndex = 0;\r\n                        roleArr[1].memory.targetIndex = 1;\r\n                    }\r\n                }\r\n            }\r\n            //任务完成后切换下标保证不会改变原来的目标\r\n            for (const iterator of roleArr) {\r\n                iterator.switchTarget(iterator);\r\n            }\r\n        }\r\n    }\r\n}","import { withdraw } from '../base/withdraw';\r\nimport { assignTarget } from '../util/assignTarget';\r\n\r\nexport const repairer = {\r\n    run: function ({ _creep, arr_repairer }) {\r\n        if (withdraw.run({ _creep })) {\r\n            /**\r\n             *  @description 需要修复的建筑物(不包含wall)并按照hits递增排序\r\n             */\r\n            let targets = _creep.room.find(FIND_STRUCTURES, {\r\n                filter: object => {\r\n                    return object.hits < object.hitsMax && object.structureType != STRUCTURE_WALL;\r\n                }\r\n            });\r\n            if (targets.length != 0) {\r\n                //按照hits递增排序\r\n                targets.sort((a, b) => a.hits - b.hits);\r\n                //按照距离远近排序\r\n                if (_creep.repair(targets[_creep.memory.targetIndex]) == 0) {\r\n                    targets.sort((a, b) => {\r\n                        return Math.sqrt((a.pos.x - _creep.pos.x) ** 2 + (a.pos.y - _creep.pos.y) ** 2) -\r\n                            Math.sqrt((b.pos.x - _creep.pos.x) ** 2 + (b.pos.y - _creep.pos.y) ** 2)\r\n                    })\r\n                }\r\n            }\r\n            //没有targets后修复wall\r\n            else if (targets.length == 0) {\r\n                targets = _creep.room.find(FIND_STRUCTURES, {\r\n                    filter: item => {\r\n                        return item.hits < item.hitsMax && item.structureType == STRUCTURE_WALL;\r\n                    }\r\n                });\r\n                targets.sort((a, b) => a.hits - b.hits);\r\n            }\r\n\r\n            //\r\n            if (targets.length > 0) {\r\n                //分配目标对象\r\n                assignTarget.run({ room: _creep.room.name, roleTarget: 'repairTarget', roleArr: arr_repairer, targets: targets });\r\n\r\n                //if()\r\n                if (_creep.repair(targets[_creep.memory.targetIndex]) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(targets[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#ac4b1e',\r\n                            opacity: .3\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = repairer;","import { withdraw } from \"../base/withdraw\";\r\nimport { assignTarget } from \"../util/assignTarget\";\r\n\r\nexport const carrier = {\r\n    /**\r\n     * @description 运输者\r\n     * @param {*} _creep \r\n     * @param {Array} arr_carrier carrier角色的creep对象数组\r\n     */\r\n    run: function ({ _creep, arr_carrier }) {\r\n\r\n        //运输的目标是否是storage\r\n        let isStorage = false;\r\n\r\n        /**\r\n         * @description 需要energy的structure并按照已有的energy量递增排序\r\n         * @param {Array} structure_energy\r\n         */\r\n        let structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_EXTENSION ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_TOWER ||\r\n                    item.structureType == STRUCTURE_NUKER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n        // storage(建筑不需要资源后向storage运输resource)\r\n        if (structure_energy.length == 0\r\n            // && _creep.room.storage.store.getUsedCapacity(RESOURCE_ENERGY) < 800000\r\n        ) {\r\n            structure_energy = [_creep.room.storage];\r\n            isStorage = true;\r\n        }\r\n        // else if (structure_energy.length == 0) {\r\n        //     structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n        //         filter: item => {\r\n        //             return item.structureType == STRUCTURE_FACTORY;\r\n        //         }\r\n        //     });\r\n        // }\r\n        //切换targetIndex，保证任务完成时不会改变其他creep的任务目标\r\n        assignTarget.run({ room: _creep.room.name, roleTarget: 'carryTarget', roleArr: arr_carrier, targets: structure_energy });\r\n\r\n        //if()\r\n        if (withdraw.run({ _creep, isStorage })) {\r\n            //携带有k就传送k到storage\r\n            if (_creep.store.getUsedCapacity(RESOURCE_KEANIUM) > 0) {\r\n                if (_creep.transfer(_creep.room.storage, RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_creep.room.storage, {\r\n                        visualizePathStyle: {\r\n                            stroke: '#11a8cd',\r\n                            opacity: .6\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //\r\n            else if (_creep.store.getUsedCapacity(RESOURCE_OXYGEN) > 0) {\r\n                if (_creep.transfer(_creep.room.storage, RESOURCE_OXYGEN) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_creep.room.storage, {\r\n                        visualizePathStyle: {\r\n                            stroke: '#11a8cd',\r\n                            opacity: .6\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //传送energy到需要的structure\r\n            else {\r\n\r\n                if (_creep.transfer(structure_energy[_creep.memory.targetIndex], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(structure_energy[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#11a8cd',\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n                //开始传输energy\r\n                else if (_creep.transfer(structure_energy[_creep.memory.targetIndex], RESOURCE_ENERGY) == 0) {\r\n                    //根据距离排序\r\n                    structure_energy.sort((a, b) => {\r\n                        return Math.sqrt((a.pos.x - _creep.pos.x) ** 2 + (a.pos.y - _creep.pos.y) ** 2) -\r\n                            Math.sqrt((b.pos.x - _creep.pos.x) ** 2 + (b.pos.y - _creep.pos.y) ** 2)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import { withdraw } from '../base/withdraw';\r\n\r\nexport const customer = {\r\n    /** \r\n     * @description 自定义creep\r\n     * @param {*} param0 \r\n     */\r\n    run: function ({ _creep, _target, _origin, _method, _resource, _amount }) {\r\n        if (withdraw.run({ _creep, _container: _origin, _resource, _amount })) {\r\n            for (const resourceType in _creep.carry) {\r\n                if (_creep[_method](_target, resourceType) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_target, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#000000\",\r\n                            opacity: 1\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { harvest } from \"../base/harvest\";\r\n\r\nexport const mineral_harvester = {\r\n    /**\r\n     * @_creep\r\n     * @param  {Array} _mineral 矿对象(可选)\r\n     * @param {Array} _container 存储矿的container(可选)\r\n     * @param {*} param0 \r\n     */\r\n    run: function ({ _creep, _mineral, _container }) {\r\n\r\n        //存放mineral的container\r\n        let container_k = _creep.room.lookForAt(LOOK_STRUCTURES, 39, 25).filter(item => {\r\n            return item.structureType == 'container';\r\n        });\r\n        // let containers = _creep.room.find(FIND_STRUCTURES, {\r\n        //     filter: item => {\r\n        //         return item.structureType == STRUCTURE_CONTAINER\r\n        //     }\r\n        // })\r\n        //获取mineral\r\n        let mineral;\r\n        if (!_mineral) {\r\n            mineral = _creep.room.find(FIND_MINERALS);\r\n        }\r\n        if (harvest.run({ _creep, _target: (_mineral || mineral) })) {\r\n            if (_creep.transfer(container_k[0], RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(container_k[0], { visualizePahStyle: { stroke: '#fae16b', opacity: .6 } });\r\n            }\r\n        }\r\n    }\r\n}","export const attacker = {\r\n    run: function ({ _creep, _room }) {\r\n        let enemies = _creep.room.find(FIND_HOSTILE_CREEPS);\r\n        if (!Game.creeps.attack) {\r\n            // _creep.room.spawn\r\n            // Game.spawns['Spawn0'].spawnCreep([ATTACK, ATTACK, MOVE, MOVE], 'attack');\r\n        }\r\n        if (Game.creeps.attack.attack(enemies[0]) == ERR_NOT_IN_RANGE) {\r\n            Game.creeps.attack.moveTo(enemies[0]);\r\n        }\r\n    }\r\n}","export const exploit_attacker = {\r\n    run: function ({ _creep, _roomName }) {\r\n        // if (!Game.rooms[_roomName]) {\r\n        //     // _creep.moveTo(new RoomPosition(25, 25, _roomName));\r\n        // } else {\r\n        let enemies = Game.rooms[_roomName].find(FIND_HOSTILE_CREEPS || FIND_HOSTILE_STRUCTURES);\r\n        if (_creep.attack(enemies[0]) == ERR_NOT_IN_RANGE) {\r\n            _creep.moveTo(enemies[0]);\r\n        }\r\n        // }\r\n    }\r\n}","export const claimer = {\r\n    run: function ({ _creep }) {\r\n        // const creep = Game.creeps['claimer'];\r\n        //要占领的房间\r\n        const room = Game.rooms['W41S23'];\r\n        //如果不存在就前往房间\r\n        if (!room) {\r\n            _creep.moveTo(new RoomPosition(25, 25, 'W41S23'))\r\n        } else {\r\n            //已经进入新房间\r\n            if (_creep.claimController(room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(room.controller, {\r\n                    visualizePathStyle: {\r\n                        stroke: '#b99cfb',\r\n                        opacity: 1\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","//新房间采能量升级controller--外矿（能量）的开采\r\nimport { harvest } from \"../base/harvest\";\r\nexport const outHarvester = {\r\n    run: function ({ _creep, _room }) {\r\n        if (harvest.run({ _creep, _target: _room.find(FIND_SOURCES_ACTIVE) })) {\r\n            // if (_creep.transfer(Game.rooms['W41S22'].storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n            //     // _creep.moveTo(Game.rooms['W41S22'].storage, {\r\n            //     //     visualPathStyle: {\r\n            //     //         stroke: '#fbe679',\r\n            //     //         opacity: .3\r\n            //     //     }\r\n            //     // });\r\n            //     if (_creep.room.name == 'W41S23') {\r\n            //         _creep.moveByPath(Memory.W41S23_energyTotop);\r\n            //     } else {\r\n            //         _creep.moveTo(Game.rooms['W41S22'].storage, {\r\n            //             visualPathStyle: {\r\n            //                 stroke: '#fbe679',\r\n            //                 opacity: .3\r\n            //             }\r\n            //         });\r\n            //     }\r\n            //     //行动时修复道路\r\n            //     let road_repair = _creep.pos.findInRange(FIND_STRUCTURES, 3, {\r\n            //         filter: item => item.structureType == STRUCTURE_ROAD && item.hits < item.hitsMax\r\n            //     });\r\n            //     if (road_repair) {\r\n            //         _creep.repair(road_repair[0]);\r\n            //     }\r\n            // }\r\n            //\r\n            if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_creep.room.controller, {\r\n                    visualPathStyle: {\r\n                        stroke: '#fbe679',\r\n                        opacity: .3\r\n                    }\r\n                });\r\n                //移动的时候维修道路\r\n                let road_repair = _creep.pos.findInRange(FIND_STRUCTURES, 3, {\r\n                    filter: item => (item.structureType == STRUCTURE_ROAD || item.structureType == STRUCTURE_CONTAINER) && item.hits < item.hitsMax\r\n                });\r\n                if (road_repair) {\r\n                    _creep.repair(road_repair[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","//新房间挖能量运输能量\r\nimport { harvest } from \"../base/harvest\";\r\n\r\nexport const H_Cer = {\r\n    /**\r\n     * @description 新房间采集、运输energy\r\n     * @param {Object} _creep creep对象\r\n     * @param {object} _room  room对象\r\n     */\r\n    run: function ({ _creep, _room }) {\r\n        let structure_energy = Game.rooms['W41S23'].find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_TOWER ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_EXTENSION\r\n                    || item.structureType == STRUCTURE_STORAGE\r\n                ) && item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        });\r\n        if (harvest.run({ _creep, _target: _room.find(FIND_SOURCES_ACTIVE) })) {\r\n            if (_creep.transfer(structure_energy[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(structure_energy[0], {\r\n                    visualizePathStyle: {\r\n                        stroke: '#ffffff',\r\n                        opacity: .3\r\n                    }\r\n                })\r\n            }\r\n            //移动的时候维修道路\r\n            let road_repair = _creep.pos.findInRange(FIND_STRUCTURES, 3, {\r\n                filter: item => (item.structureType == STRUCTURE_ROAD || item.structureType == STRUCTURE_CONTAINER) && item.hits < item.hitsMax\r\n            });\r\n            if (road_repair) {\r\n                _creep.repair(road_repair[0]);\r\n            }\r\n        }\r\n    }\r\n}","//tower\r\nexport const tower = {\r\n    /**\r\n     * \r\n     * @param {*} _structure \r\n     * @param {Number} _range \r\n     */\r\n    run: function (_structure, _range) {\r\n        if (_structure.store.getCapacity(RESOURCE_ENERGY) > 0) {\r\n            //敌人\r\n            const targets_attack = _structure.room.find(FIND_HOSTILE_CREEPS);\r\n            //需要治疗的creep\r\n            const targets_heal = _structure.pos.findInRange(FIND_CREEPS, _range, {\r\n                filter: item => {\r\n                    return item.body.hits < item.body.hitsMax;\r\n                }\r\n            });\r\n            //修复的建筑（不包含wall)\r\n            const targets_repair = _structure.pos.findInRange(FIND_STRUCTURES, _range, {\r\n                filter: item => {\r\n                    return item.hits < item.hitsMax && item.structureType != STRUCTURE_WALL && item.structureType == STRUCTURE_CONTAINER;\r\n                }\r\n            }).sort((a, b) => a.hits - b.hits);\r\n            //工作模式选择\r\n            if (targets_attack.length > 0) {\r\n                _structure.attack(targets_attack[0]);\r\n                // Game.notify('你被攻击了', 0);\r\n            }\r\n            //else if (targets_heal.length) {\r\n            //     _structure.heal(targets_heal[0]);\r\n            // }\r\n            else if (targets_repair.length) {\r\n                if (_structure.store.getFreeCapacity(RESOURCE_ENERGY) < 100) {\r\n                    _structure.repair(targets_repair[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * 全局统计信息扫描器\r\n * 负责搜集关于 cpu、memory、GCL、GPL 的相关信息\r\n */\r\nconst stateScanner = function () {\r\n    // 每 20 tick 运行一次\r\n    if (Game.time % 20) return;\r\n\r\n    if (!Memory.stats) Memory.stats = {};\r\n\r\n    // 统计 GCL / GPL 的升级百分比和等级\r\n    Memory.stats.gcl = (Game.gcl.progress / Game.gcl.progressTotal) * 100;\r\n    Memory.stats.gclLevel = Game.gcl.level;\r\n    Memory.stats.gpl = (Game.gpl.progress / Game.gpl.progressTotal) * 100;\r\n    Memory.stats.gplLevel = Game.gpl.level;\r\n    // CPU 的当前使用量\r\n    Memory.stats.cpu = Game.cpu.getUsed();\r\n    // bucket 当前剩余量\r\n    Memory.stats.bucket = Game.cpu.bucket;\r\n    //rcl\r\n    Memory.stats.rclPrgress = Game.rooms[\"W41S22\"].controller.progress / Game.rooms[\"W41S22\"].controller.progressTotal;\r\n};\r\n//\r\n\r\n// Game.prototype.lo = function () {\r\n//     console.log('a');\r\n// }\r\n//-----------------------------------------------------------------------------------------------------------------------\r\n//role\r\nimport { harvester } from \"./role/role.harvester\";\r\nimport { builder } from \"./role/role.builder\";\r\nimport { upgrader } from \"./role/role.upgrader\";\r\nimport { repairer } from \"./role/role.repairer\";\r\nimport { carrier } from \"./role/role.carrier\";\r\nimport { customer } from \"./role/role.customer\";\r\nimport { mineral_harvester } from \"./role/role.mineral.harvester\";\r\nimport { attacker } from \"./role/role.attacker\";\r\n//exploit\r\nimport { exploit_attacker } from \"./exploit/exploit_attack\";\r\n//扩张\r\nimport { claimer } from \"./role/role.claimer\";\r\nimport { outHarvester } from \"./Temporary/outHarvester\";\r\nimport { H_Cer } from \"./Temporary/H_Cer\";\r\n//structure\r\nimport { tower } from \"./structure/structure.tower\";\r\n//config\r\n// import role_config from \"./creeps.config.json\";\r\nimport rooms_config from \"./config/rooms.config.json\";\r\nvar Resources = {\r\n    \"RESOURCE_KEANIUM\": RESOURCE_KEANIUM\r\n}\r\n/**\r\n * @description 对象类型的配置 {w41s22:{roomName}}\r\n */\r\nconst rooms_config_Object = {};\r\nfor (const iterator of rooms_config.roomsData) {\r\n    rooms_config_Object[iterator.roomName] = iterator;\r\n}\r\n//############################################################################\r\n// Game.property.logMarketHistory = function () {\r\n//     Game.market.outgoingTransactions()\r\n// }\r\n//############################################################################\r\n//判断任务队列是否改变-第一个任务完成\r\nMemory.targetTask = {};\r\n//判断每个房间的carrier不存在且房间能量小于300\r\nlet noCarrierRooms = {};\r\nfor (const room in Game.rooms) {\r\n    Memory.targetTask[room] = {};\r\n    Memory.targetTask[room].carryTarget = \"\";\r\n    Memory.targetTask[room].repairTarget = \"\";\r\n    noCarrierRooms[room] = false;\r\n}\r\n//缓存的路径|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|\r\n// let path = [];\r\n// if (Game.rooms[\"W41S23\"]) {\r\n//     path = Game.rooms[\"W41S23\"].findPath(new RoomPosition(35, 42, \"W41S23\"), new RoomPosition(23, 0, \"W41S23\"));\r\n//     path = Room.serializePath(path);\r\n// }\r\n// Memory.W41S23_energyTotop = \"3541111188888888888811111111111111181111211111\";\r\n//\r\n/**\r\n * 将字符串变为变量\r\n * @param {Object} obj 转变的字符串对象数组\r\n * @param {String} str 转变的字符串\r\n * @returns\r\n */\r\nfunction getVerb(obj, str) {\r\n    let arr = str.split(\".\");\r\n    while (arr.length) {\r\n        obj = obj[arr.shift()];\r\n    }\r\n    return obj;\r\n}\r\n/**\r\n * @description 将身体部件字符串转化为变量\r\n * @param {Array} str body组件字符串数组\r\n * @returns body组件数组\r\n */\r\nfunction f_tov(str) {\r\n    let r = [];\r\n    for (const iterator of str) {\r\n        switch (iterator) {\r\n            case \"WORK\":\r\n                r.push(WORK);\r\n                break;\r\n            case \"CARRY\":\r\n                r.push(CARRY);\r\n                break;\r\n            case \"MOVE\":\r\n                r.push(MOVE);\r\n                break;\r\n            case \"ATTACK\":\r\n                r.push(ATTACK);\r\n                break;\r\n            case \"RANGED_ATTACK\":\r\n                r.push(RANGED_ATTACK);\r\n                break;\r\n            case \"HEAL\":\r\n                r.push(HEAL);\r\n                break;\r\n            case \"CLAIM\":\r\n                r.push(CLAIM);\r\n                break;\r\n            case \"TOUGH\":\r\n                r.push(TOUGH);\r\n                break;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * @description 按房间规划spawn的孵化分配\r\n * @param {Object} room room配置\r\n * @param {Object} role role配置\r\n */\r\nfunction f_spawnCreep(room, role) {\r\n    let index = Math.floor(Math.random() * 10);\r\n    for (const spawn of spawnRoom[room.roomName]) {\r\n        if (spawn.spawnCreep(f_tov(role.body), `${role.name}_${room.roomName}_${index}`, { memory: role.memory }) == 0) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n//原型方法>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n//原型-切换目标对象(self-role对象数组)\r\nCreep.prototype.switchTarget = function (self) {\r\n    if (self.memory.targetIndex == 0) {\r\n        self.memory.targetIndex += 1;\r\n    } else if (self.memory.targetIndex == 1) {\r\n        self.memory.targetIndex -= 1;\r\n    }\r\n};\r\n//creep的被攻击发送生成attack方法\r\nCreep.prototype.wasAttacked = function ({ _creep }) {\r\n    if (_creep.hits < _creep.hitsMax) {\r\n        attacker.run({ _creep });\r\n    }\r\n};\r\n/**\r\n * @param {Object:{Number}} creepsRoomNum 单个房间的creep个数，判断creep个数是否改变了\r\n */\r\nlet creepsRoomNum = {\r\n    'W41S22': 0,\r\n    'W41S23': 0\r\n}\r\n/**\r\n * @param {Object} creepsAll 全局所有creep\r\n */\r\nlet creepsAll;\r\n/**\r\n * @description 所有spawn按房间分\r\n * @param {Object:{Array}} spawnRoom\r\n */\r\nlet spawnRoom = {};\r\nfor (const key in Game.rooms) {\r\n    let spawnArray = [];\r\n    for (const name in Game.spawns) {\r\n        if (name.includes(key)) {\r\n            spawnArray.push(Game.spawns[name]);\r\n        }\r\n    }\r\n    spawnRoom[key] = spawnArray;\r\n}\r\n\r\n//loop主函数-----------------------------------------------------------------------------------------------------------------------\r\nexport const loop = function () {\r\n    //兑换pielx\r\n    if (Game.cpu.bucket == 10000) {\r\n        Game.cpu.generatePixel();\r\n    }\r\n    //\r\n    creepsAll = Game.creeps;\r\n    /**\r\n     * @description 检索Memory删除没用的数据\r\n     */\r\n    for (const key in Memory.creeps) {\r\n        if (!creepsAll[key]) {\r\n            delete Memory.creeps[key];\r\n        }\r\n    }\r\n    /**\r\n     * @description 分配structure_tower任务\r\n     */\r\n    let structures = Game.structures;\r\n    for (const key in structures) {\r\n        let structure = structures[key];\r\n        if (structure.structureType == STRUCTURE_TOWER) {\r\n            tower.run(structure, 15);\r\n        }\r\n    }\r\n    /**\r\n     * @description 检索creep按房间的不同种类的creep\r\n     * @param {String} role 检索的memory的role（Harvester）\r\n     * @returns {Object:{Array}} 房间名为key的不同种类的creep对象数组\r\n     */\r\n    function f_roleArrayRoom(role) {\r\n        let arr = {};\r\n        for (const Rname in Game.rooms) {\r\n            let arrR = [];\r\n            for (const key in creepsAll) {\r\n                if (key.includes(Rname)) {\r\n                    if (creepsAll[key].memory.role == role) {\r\n                        arrR.push(creepsAll[key]);\r\n                    }\r\n                }\r\n            }\r\n            arr[Rname] = arrR;\r\n        }\r\n        return arr;\r\n    }\r\n    //分配不同目标对象时需要的role对象数组(按照room)\r\n    let arrRoom_harvester = f_roleArrayRoom(\"Harvester\");\r\n    let arrRoom_builder = f_roleArrayRoom(\"Builder\");\r\n    let arrRoom_upgrader = f_roleArrayRoom(\"Upgrader\");\r\n    let arrRoom_repairer = f_roleArrayRoom(\"Repairer\");\r\n    let arrRoom_carrier = f_roleArrayRoom(\"Carrier\");\r\n    /**\r\n     * @description 统计不同房间的不同种类的creep数量,孵化使用\r\n     * @param {Object} numRoomCreep 按照房间分的\r\n     */\r\n    let numRoomCreep = {};\r\n    for (const iterator of rooms_config.roomsData) {\r\n        // numRoomCreep[iterator.roomName] = {};\r\n        let obj = {};\r\n        for (const key in iterator.creeps) {\r\n            obj[key] = 0;\r\n            for (const name in creepsAll) {\r\n                if (name.includes(iterator.roomName) && RegExp(`^${iterator.creeps[key].name}`).test(name)) {\r\n                    obj[key] += 1;\r\n                }\r\n            }\r\n        }\r\n        numRoomCreep[iterator.roomName] = obj;\r\n    }\r\n    /**\r\n     * @description 一個房間的creep數量,判断是否有creep的死亡/孵化\r\n     * {\"W41S22\":3,\"W41S23\":2}\r\n     */\r\n    let numRoom = {};\r\n    for (const room in numRoomCreep) {\r\n        let num = 0;\r\n        for (const name in numRoomCreep[room]) {\r\n            num += numRoomCreep[room][name];\r\n        }\r\n        numRoom[room] = num;\r\n    }\r\n    //生成新creep完成时执行，分配targetIndex\r\n    //creep死亡和新生后执行，给harvester分配index \r\n    for (const room in Game.rooms) {\r\n        //判断是否有carrier\r\n        //判断harvester是否担任运输任务\r\n        if (numRoomCreep[room].Carrier == 0 && Game.rooms[room].energyAvailable <= 300) {\r\n            noCarrierRooms[room] = true;\r\n        }\r\n        //判断一个房间的creep数量是否改变，改变后重新分配harvester的目标targetIndex\r\n        if (numRoom[room] != creepsRoomNum[room]) {\r\n            creepsRoomNum[room] = numRoom[room];\r\n            let new_arr_harvester = f_roleArrayRoom('Harvester')[room];\r\n            for (const index in arrRoom_harvester[room]) {\r\n                new_arr_harvester[index].memory.targetIndex = index % 2;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description 孵化creep\r\n     */\r\n    // !孵化\r\n    for (const room of rooms_config.roomsData) {\r\n        //一个房间的配置\r\n        let numCreep = numRoomCreep[room.roomName];\r\n        for (const key in room.creeps) {\r\n            //不同种类的creep配置\r\n            let role = room.creeps[key];\r\n            if (numCreep[key] < role.number) {\r\n                //建造-房间有施工地时孵化\r\n                if (Game.rooms[room.roomName].find(FIND_CONSTRUCTION_SITES).length > 0 && role.name == \"builder\") {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n                //采矿-矿有资源时孵化\r\n                else if (role.name == \"mineralharvester\" && Game.rooms[room.roomName].find(FIND_MINERALS)[0].mineralAmount > 0 &&\r\n                    Game.rooms[room.roomName].storage.store.getCapacity(Resources[room.resource]) < 400000) {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n                //外能量-有外房间时孵化\r\n                //exploit-开拓房间/complate-以开拓房间\r\n                else if (room.roomStyle == 'exploit' && role.name == \"outharvester\") {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n                //外房运输energy-有外房间时孵化\r\n                else if (role.name == \"hcer\" && room.roomStyle == 'exploit') {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n                //控制从storage向terimal转移能量和矿物\r\n                else if (role.name == \"customer\" && Game.rooms[room.roomName].storage.store.getUsedCapacity(RESOURCE_KEANIUM) > 10000) {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n                //除建筑/采矿/外能量/外能量运输\r\n                else if (role.name != \"builder\" && role.name != \"mineralharvester\" && role.name != \"outharvester\" && role.name != 'hcer') {\r\n                    f_spawnCreep(room, role);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description 分配creep任务\r\n     */\r\n    for (const room in Game.rooms) {\r\n        for (const key in Game.creeps) {\r\n            //判断creep属于哪个room\r\n            if (key.includes(room)) {\r\n                let _creep = Game.creeps[key];\r\n                //自身检查是否被攻击了并发出孵化attack指令\r\n                // _creep.wasAttacked({ _creep, _room: room });\r\n\r\n                switch (_creep.memory.role) {\r\n                    case \"Harvester\":\r\n                        {\r\n                            harvester.run({ _creep, noCarrier: noCarrierRooms[room] });\r\n                        }\r\n                        break;\r\n                    case \"Builder\":\r\n                        {\r\n                            builder.run(_creep);\r\n                        }\r\n                        break;\r\n                    case \"Upgrader\":\r\n                        {\r\n                            upgrader.run(_creep);\r\n                        }\r\n                        break;\r\n                    case \"Repairer\":\r\n                        {\r\n                            repairer.run({ _creep, arr_repairer: arrRoom_repairer[room] });\r\n                        }\r\n                        break;\r\n                    case \"Carrier\":\r\n                        {\r\n                            carrier.run({ _creep, arr_carrier: arrRoom_carrier[room] });\r\n                        }\r\n                        break;\r\n                    case \"MineralHarvester\":\r\n                        {\r\n                            mineral_harvester.run({ _creep, _mineral: Game.rooms[room].find(FIND_MINERALS) });\r\n                        }\r\n                        break;\r\n                    //自定义\r\n                    case \"Customer\":\r\n                        {\r\n                            //不同房间匹配不同的资源\r\n                            let __resource;\r\n                            switch (room) {\r\n                                case 'W41S22': {\r\n                                    __resource = RESOURCE_KEANIUM;\r\n                                };\r\n                                    break;\r\n                                case 'W41S23': {\r\n                                    __resource = RESOURCE_OXYGEN;\r\n                                };\r\n                                    break;\r\n                                default: ; break;\r\n                            }\r\n                            if (Game.rooms[room].terminal.store.getUsedCapacity(RESOURCE_ENERGY) < 160000 && Game.rooms[room].storage.store.getUsedCapacity(RESOURCE_ENERGY) > 600000) {\r\n                                customer.run({\r\n                                    _creep,\r\n                                    _target: _creep.room.terminal,\r\n                                    _origin: _creep.room.storage,\r\n                                    _method: \"transfer\",\r\n                                    _resource: RESOURCE_ENERGY,\r\n                                    //大于容量会停止widthdraw\r\n                                    _amount: 100,\r\n                                });\r\n                            }\r\n                            else if (Game.rooms[room].terminal.store.getUsedCapacity(__resource) < 200000 && Game.rooms[room].storage.store.getUsedCapacity(__resource) > 100000) {\r\n                                customer.run({\r\n                                    _creep,\r\n                                    _target: _creep.room.terminal,\r\n                                    _origin: _creep.room.storage,\r\n                                    _method: \"transfer\",\r\n                                    _resource: __resource,\r\n                                    //大于容量会停止widthdraw\r\n                                    _amount: 100,\r\n                                });\r\n                            }\r\n                            else {\r\n                                let storage = Game.rooms[room].storage;\r\n                                let links = Game.rooms[room].lookForAtArea(LOOK_STRUCTURES, storage.pos.y - 2, storage.pos.x - 2, storage.pos.y + 2, storage.pos.x + 2, true)\r\n                                    .filter((item) => item.structure.structureType == \"link\");\r\n                                customer.run({\r\n                                    _creep,\r\n                                    _target: _creep.room.terminal,\r\n                                    _origin: links[0].structure,\r\n                                    _method: \"transfer\",\r\n                                    _resource: RESOURCE_ENERGY,\r\n                                    //大于容量会停止widthdraw\r\n                                    _amount: 100,\r\n                                });\r\n                            };\r\n                        }\r\n                        break;\r\n                    //扩张\r\n                    case \"Claimer\":\r\n                        {\r\n                            claimer.run({ _creep });\r\n                        }\r\n                        break;\r\n                    case \"OutHarvester\":\r\n                        {\r\n                            outHarvester.run({ _creep, _room: Game.rooms[\"W41S23\"] });\r\n                        }\r\n                        break;\r\n                    case \"HCer\": {\r\n                        H_Cer.run({ _creep, _room: Game.rooms[\"W41S23\"] });\r\n                    }\r\n                    case \"E_Attacker\": {\r\n                        // console.log(JSON.stringify(rooms_config_Object[room].creeps.E_Attacker));\r\n                        exploit_attacker.run({ _creep, _roomName: rooms_config_Object[room].creeps.E_Attacker.targetRoom })\r\n                    }\r\n                    //\r\n                    default: ;\r\n                        break;\r\n                }\r\n                //     //存活时间小于10显示气泡\r\n                if (_creep.ticksToLive < 10) _creep.say(_creep.ticksToLive);\r\n            }\r\n        }\r\n        //交易\r\n\r\n    }\r\n    //\r\n    // Game.spawns['Spawn0'].spawnCreep([WORK,CARRY,MOVE], 'Customer', { memory: { role: 'Customer' } });\r\n    /**\r\n     * @description 数据信息的获取\r\n     */\r\n    stateScanner();\r\n    /**\r\n     * @description 遍历房间控制交易\r\n     */\r\n    const resource = {\r\n        RESOURCE_KEANIUM: RESOURCE_KEANIUM,\r\n        RESOURCE_OXYGEN: RESOURCE_OXYGEN,\r\n    }\r\n    for (const room of rooms_config.roomsData) {\r\n        //*判断相应房间的terminal的矿物储备\r\n        if (Game.rooms[room.roomName].terminal.store.getUsedCapacity(resource[room.resource]) > 1000) {\r\n            let market_list = Game.market.getAllOrders({ type: ORDER_BUY, resourceType: resource[room.resource] }).sort((a, b) => {\r\n                return b.price - a.price;\r\n            });\r\n            let market_order_list = [];\r\n            for (const iterator of market_list) {\r\n                if (iterator.price < 1) {\r\n                    break;\r\n                }\r\n                if (iterator.amount != 0 && iterator.price > 1) {\r\n                    let obj = {}\r\n                    obj.id = iterator.id;\r\n                    obj.amount = iterator.amount;\r\n                    market_order_list.push(obj);\r\n                }\r\n            }\r\n            if (market_order_list.length > 0) {\r\n                if (Game.rooms[room.roomName].terminal.store.getUsedCapacity(resource[room.resource]) > 1000) {\r\n                    Game.market.deal(market_order_list[0].id, market_order_list[0].amount, room.roomName);\r\n                }\r\n            }\r\n        }\r\n        //*判断能量储备\r\n        else if (Game.rooms[room.roomName].terminal.store.getUsedCapacity(RESOURCE_ENERGY) > 100000 &&\r\n            Game.rooms[room.roomName].storage.store.getUsedCapacity(RESOURCE_ENERGY) > 300000) {\r\n            let market_list = Game.market.getAllOrders({ type: ORDER_BUY, resourceType: RESOURCE_ENERGY }).sort((a, b) => {\r\n                return b.price - a.price;\r\n            });\r\n            let market_order_list = [];\r\n            for (const iterator of market_list) {\r\n                if (iterator.price < 10) {\r\n                    break;\r\n                }\r\n                if (iterator.amount != 0 && iterator.price > 10) {\r\n                    let obj = {}\r\n                    obj.id = iterator.id;\r\n                    obj.amount = iterator.amount;\r\n                    market_order_list.push(obj);\r\n                }\r\n            }\r\n            if (market_order_list.length > 0) {\r\n                if (Game.rooms[room.roomName].terminal.store.getUsedCapacity(RESOURCE_ENERGY) > 1000) {\r\n                    Game.market.deal(market_order_list[0].id, market_order_list[0].amount, room.roomName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n"],"names":[],"mappings":"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"}