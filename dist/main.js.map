{"version":3,"file":"main.js","sources":["../src/harvest.js","../src/role.harvester.js","../src/withdraw.js","../src/role.builder.js","../src/role.upgrader.js","../src/assignTarget.js","../src/role.repairer.js","../src/role.carrier.js","../src/structure.tower.js","../src/main.js"],"sourcesContent":["export const harvest = {\r\n\r\n    /** \r\n     * @param {*} _creep \r\n     * @param {Number} energy_index energy矿的序号\r\n     * @returns {Boolean}\r\n    */\r\n    // harvesting: true,\r\n    run: function (_creep, energy_index = 0) {\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n            //从工作状态到不工作状态\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n            //从不工作状态到工作状态\r\n        }\r\n\r\n\r\n\r\n        if (!_creep.memory.working) {\r\n            //所有energy矿【arr】\r\n            const source_energy = _creep.room.find(FIND_SOURCES);\r\n            if (_creep.harvest(source_energy[energy_index]) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(source_energy[energy_index], { visualizePahStyle: { stroke: '#fae16b', opacity: 1 } });\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}","import { harvest } from \"./harvest\";\r\n\r\n\r\nexport const harvester = {\r\n    /**\r\n     * @description 采集者\r\n     * @param {*} _creep \r\n     * @param {Boolean} noCarrier 没有carrier了\r\n     */\r\n    run: function ({ _creep, noCarrier }) {\r\n\r\n        //需要energy的建筑物【arr】，并按照已有energy的递增排序---没有container时替换targets\r\n        const structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_EXTENSION ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_TOWER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n        //----------------------------------//\r\n        // 需要energy的container建筑【arr】\r\n        let targets = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: structure => {\r\n                return structure.structureType == STRUCTURE_CONTAINER &&\r\n                    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        });\r\n        //----------------------------------//\r\n        //指定位置范围内的container【arr】\r\n        const containers = _creep.room.lookAtArea(23, 30, 24, 32, true).filter(item => {\r\n            return item.type == 'structure'\r\n        });\r\n        //\r\n        try {\r\n            const tar = containers.filter(item => {\r\n                return item.structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            })\r\n        } catch (error) {\r\n            // console.log(error.message);\r\n        }\r\n        //没有carrier后harvester开始运输\r\n        if (noCarrier) {\r\n            targets = structure_energy;\r\n        }\r\n\r\n        if (harvest.run(_creep)) {\r\n            if (_creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(targets[0], { visualizePahStyle: { stroke: '#fae16b', opacity: .6 } });\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = harvester;\r\n// tar[0].structure\r\n\r\n// [\r\n//     {\r\n//         \"type\": \"structure\",\r\n//         \"structure\": {\r\n//             \"id\": \"634ef405f1b4e3800b8a5808\",\r\n//             \"room\": {\r\n//                 \"name\": \"W41S22\", \"energyAvailable\": 550,\r\n//                 \"energyCapacityAvailable\": 550,\r\n//                 \"visual\": { \"roomName\": \"W41S22\" }\r\n//             },\r\n//             \"pos\": { \"x\": 30, \"y\": 24, \"roomName\": \"W41S22\" },\r\n//             \"store\": { \"energy\": 151 },\r\n//             \"storeCapacity\": 2000,\r\n//             \"ticksToDecay\": 205,\r\n//             \"hits\": 154700,\r\n//             \"hitsMax\": 250000,\r\n//             \"structureType\": \"container\"\r\n//         },\r\n//         \"x\": 30, \"y\": 24\r\n//     }\r\n// ]\r\n","\r\n//拿取energy\r\nexport const withdraw = {\r\n    /**\r\n     * @description 拿取\r\n     * @param {*} _creep \r\n     * @param {*} _container \r\n     * @param {Boolean} isStorage\r\n     * @returns {Boolean}\r\n     */\r\n    run: function ({ _creep, _container, isStorage }) {\r\n\r\n        //有energy的container建筑【arr】\r\n        const containers = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return item.structureType == STRUCTURE_CONTAINER && item.store.getUsedCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        });\r\n\r\n        //掉落的energy【arr】\r\n        const energy = _creep.room.find(FIND_DROPPED_RESOURCES);\r\n\r\n        /**\r\n         * @description 判断container有没有energy\r\n         * @param {boolean} haveEnergy\r\n         */\r\n        let haveEnergy = false;//有energy为false\r\n        //全都没有energy为true\r\n        haveEnergy = containers.every(element => {\r\n            return element.store.getUsedCapacity(RESOURCE_ENERGY) == 0;\r\n        })\r\n\r\n        //判断工作状态\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n        } else if (_creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0 && haveEnergy) {//自己身上有container没有能量\r\n            return true;\r\n            //container都没energ而自身有一些nergy\r\n        }\r\n\r\n        //\r\n        if (!_creep.memory.working) {\r\n\r\n            //拿取掉落的energy\r\n            // if (energy.length > 0) {\r\n            //     if (_creep.pickup(energy[0]) == ERR_NOT_IN_RANGE) {\r\n            //         _creep.moveTo(energy[0])\r\n            //     }\r\n            // }\r\n\r\n            //拿取container的energy\r\n            if (!haveEnergy) {\r\n                if (_creep.withdraw(containers[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: 1\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            //拿取storage的energy(运输目标是storage时不执行)\r\n            else if (!isStorage) {\r\n\r\n                //storage\r\n                const storage = _creep.room.find(FIND_STRUCTURES, {\r\n                    filter: item => item.structureType == STRUCTURE_STORAGE\r\n                });\r\n\r\n                if (_creep.withdraw(storage[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(storage[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: 1\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}","// const harvester = require('role.harvester');\r\nimport { harvest } from './harvest';\r\nimport { withdraw } from './withdraw';\r\nexport const builder = {\r\n    /**\r\n     * @description 建造者\r\n     * @param {*} _creep \r\n     */\r\n    run: function (_creep) {\r\n        if (withdraw.run({ _creep })) {\r\n            /**\r\n             * @description 施工工地并按照所需energy的多少递增排序\r\n             */\r\n            let construction = _creep.room.find(FIND_MY_CONSTRUCTION_SITES);\r\n            // construction.sort((a, b) => a.progressTotal - b.progressTotal);\r\n            if (construction.length) {\r\n                if (_creep.build(construction[0]) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(construction[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#23d08a\",\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = builder;","import { harvest } from './harvest';\r\nexport const upgrader = {\r\n    run: function (_creep) {\r\n        if (harvest.run(_creep, 1)) {\r\n            if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_creep.room.controller);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// module.exports = upgrader;","export const assignTarget = {\r\n    /**\r\n     * @description 给不同的creep分配不同的目标对象\r\n     * @param {Array} targets structure_energy不working时的目标\r\n     * @param {Object} roleTarget   Memory.carryTarget目标index\r\n     * @param {Array} roleArr 相应的creep对象数组\r\n     */\r\n    run: function ({ roleTarget, roleArr, targets }) {\r\n\r\n        //判断目标任务是否完成一个\r\n        if (Memory[roleTarget] != targets[0].id) {\r\n            Memory[roleTarget] = targets[0].id;\r\n            // 只剩一个任务时\r\n            if (targets.length == 1) {\r\n                // _creep.memory.targetIndex = 0;\r\n                roleArr.forEach(element => {\r\n                    element.memory.targetIndex = 1;\r\n                });\r\n            } else {\r\n                // if (_creep == roleArr[1])\r\n                //任务超过一个后重新分配\r\n                if (roleArr[0].memory.targetIndex == roleArr[1].memory.targetIndex) {\r\n                    roleArr[0].memory.targetIndex = 0;\r\n                    roleArr[1].memory.targetIndex = 1;\r\n                }\r\n            }\r\n            //任务完成后切换下标保证不会改变原来的目标\r\n            for (const iterator of roleArr) {\r\n                iterator.switchTarget(iterator);\r\n            }\r\n        }\r\n    }\r\n}","import { withdraw } from './withdraw';\r\nimport { assignTarget } from './assignTarget';\r\n\r\nexport const repairer = {\r\n    run: function ({ _creep, arr_repairer }) {\r\n        if (withdraw.run({ _creep })) {\r\n\r\n            /**\r\n             *  @description 需要修复的建筑物(不包含wall)并按照hits递增排序\r\n             */\r\n            const targets = _creep.room.find(FIND_STRUCTURES, {\r\n                filter: object => {\r\n                    return object.hits < object.hitsMax && object.structureType != STRUCTURE_WALL;\r\n                }\r\n            });\r\n            //没有targets后修复wall\r\n            if (targets.length == 0) {\r\n                targets = _creep.room.find(FIND_STRUCTURES, {\r\n                    filter: item => {\r\n                        return item.hits < item.hitsMax && item.structureType == STRUCTURE_WALL;\r\n                    }\r\n                })\r\n            }\r\n            targets.sort((a, b) => a.hits - b.hits);\r\n\r\n            if (targets.length > 0) {\r\n\r\n                // const creeps = Game.spawns['Spawn0'].room.find(FIND_CREEPS).filter(item => {\r\n                //     return item.memory.role == 'Repairer';\r\n                // });\r\n\r\n                //分配目标对象\r\n                assignTarget.run({ roleTarget: 'repairTarget', roleArr: arr_repairer, targets: targets });\r\n\r\n                //if()\r\n                if (_creep.repair(targets[_creep.memory.targetIndex]) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(targets[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#ac4b1e',\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = repairer;","import { withdraw } from \"./withdraw\";\r\nimport { assignTarget } from \"./assignTarget\";\r\n\r\nexport const carrier = {\r\n    /**\r\n     * @description 运输者\r\n     * @param {*} _creep \r\n     */\r\n    run: function ({ _creep, arr_carrier }) {\r\n\r\n        //运输的目标是否是storage\r\n        let isStorage = false;\r\n\r\n        /**\r\n         * @description 需要energy的structure并按照已有的energy量递增排序\r\n         * @param {Array} structure_energy\r\n         */\r\n        let structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_EXTENSION ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_TOWER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n\r\n        // storage(其他建筑的energy都已满)\r\n        if (structure_energy.length == 0) {\r\n            structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n                filter: item => item.structureType == STRUCTURE_STORAGE\r\n            });\r\n            isStorage = true;\r\n        }\r\n\r\n        assignTarget.run({ roleTarget: 'carryTarget', roleArr: arr_carrier, targets: structure_energy });\r\n\r\n        //#region\r\n        //判断目标任务是否完成一个\r\n        // if (Memory.carryTarget != structure_energy[0].id) {\r\n        //     Memory.carryTarget = structure_energy[0].id;\r\n        //     // 只剩一个任务时\r\n        //     if (structure_energy.length == 1) {\r\n        //         // _creep.memory.targetIndex = 0;\r\n        //         arr_carrier.forEach(element => {\r\n        //             element.memory.targetIndex = 1;\r\n        //         });\r\n        //     } else {\r\n        //         // if (_creep == arr_carrier[1])\r\n        //         //任务超过一个后重新分配\r\n        //         if (arr_carrier[0].memory.targetIndex == arr_carrier[1].memory.targetIndex) {\r\n        //             arr_carrier[0].memory.targetIndex = 0;\r\n        //             arr_carrier[1].memory.targetIndex = 1;\r\n        //         }\r\n        //     }\r\n        //     //任务完成后切换下标保证不会改变原来的目标\r\n        //     for (const iterator of arr_carrier) {\r\n        //         iterator.switchTarget(iterator);\r\n        //     }\r\n        // }\r\n        //#endregion\r\n\r\n        //if()\r\n        if (withdraw.run({ _creep, isStorage })) {\r\n\r\n            if (_creep.transfer(structure_energy[_creep.memory.targetIndex], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(structure_energy[_creep.memory.targetIndex], {\r\n                    visualizePathStyle: {\r\n                        stroke: '#11a8cd',\r\n                        opacity: .6\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","export const tower = {\r\n    /**\r\n     * \r\n     * @param {*} _structure \r\n     * @param {Number} _range \r\n     */\r\n    run: function (_structure, _range) {\r\n        if (_structure.store.getCapacity(RESOURCE_ENERGY) > 0) {\r\n            //敌人\r\n            const targets_attack = _structure.room.find(FIND_HOSTILE_CREEPS);\r\n            //需要治疗的creep\r\n            const targets_heal = _structure.pos.findInRange(FIND_CREEPS, _range, {\r\n                filter: item => {\r\n                    return item.body.hits < item.body.hitsMax;\r\n                }\r\n            });\r\n            //修复的建筑（不包含wall)\r\n            const targets_repair = _structure.pos.findInRange(FIND_STRUCTURES, _range, {\r\n                filter: item => {\r\n                    return item.hits < item.hitsMax && item._structureType != STRUCTURE_WALL;\r\n                }\r\n            }).sort((a, b) => a.hits - b.hits);\r\n            //工作模式选择\r\n            if (targets_attack.length > 0) {\r\n                _structure.attack(targets_attack[0]);\r\n                Game.notify('你被攻击了', 0);\r\n            }\r\n            //else if (targets_heal.length) {\r\n            //     _structure.heal(targets_heal[0]);\r\n            // }\r\n            // else if (targets_repair.length) {\r\n            //     _structure.repair(targets_repair[0]);\r\n            // }\r\n        }\r\n    }\r\n}","\n//role\nimport { harvester } from './role.harvester';\nimport { builder } from './role.builder';\nimport { upgrader } from './role.upgrader';\nimport { repairer } from './role.repairer';\nimport { carrier } from './role.carrier';\n//structure\nimport { tower } from './structure.tower';\n//config\nimport role_config from './creeps.config.json';\n\nMemory.carryTarget = \"\";\nMemory.repairTarget = \"\";\n\n/**\n     * 将字符串变为变量\n     * @param {Object} obj \n     * @param {String} str \n     * @returns \n     */\nfunction getVerb(obj, str) {\n    let arr = str.split('.');\n    while (arr.length) {\n        obj = obj[arr.shift()];\n    }\n    return obj;\n}\n\n//将身体部件字符串转化为变量\nfunction tov(str) {\n    let r = [];\n    for (const iterator of str) {\n        switch (iterator) {\n            case \"WORK\": r.push(WORK); break;\n            case \"CARRY\": r.push(CARRY); break;\n            case \"MOVE\": r.push(MOVE); break;\n            case \"ATTACK\": r.push(ATTACK); break;\n            case \"RANGED_ATTACK\": r.push(RANGED_ATTACK); break;\n            case \"HEAL\": r.push(HEAL); break;\n            case \"CLAIM\": r.push(CLAIM); break;\n            case \"TOUGH\": r.push(TOUGH); break;\n        }\n    }\n    return r;\n}\n\n//原型-切换目标对象\nCreep.prototype.switchTarget = function (self) {\n\n    if (self.memory.targetIndex == 0) {\n        self.memory.targetIndex += 1;\n    } else if (self.memory.targetIndex == 1) {\n        self.memory.targetIndex -= 1;\n    }\n    // console.log(1, self, self.memory.targetIndex);\n}\n\n\n//loop主函数\nexport const loop = function () {\n\n    let creeps = Game.creeps;\n    let structures = Game.structures;\n\n    //分配structure任务\n    for (const key in structures) {\n        let structure = structures[key];\n        if (structure.structureType == STRUCTURE_TOWER) {\n            tower.run(structure, 15);\n        }\n    }\n    //统计不同类型creep的对象数组\n    function roleArray(role) {\n        let arr = [];\n        for (const key in creeps) {\n            if (creeps[key].memory.role == role) {\n                arr.push(creeps[key]);\n            }\n        }\n        return arr;\n    }\n    let arr_harvester = roleArray('Harvester');\n    let arr_builder = roleArray('Builder');\n    let arr_upgrader = roleArray('Upgrader');\n    let arr_repairer = roleArray('Repairer');\n    let arr_carrier = roleArray('Carrier');\n\n    //统计不同种类creep的名字数组【arr】\n    function filter(role) {\n        return Object.keys(creeps).filter(item => {\n            return creeps[item].memory.role == role;\n        })\n    }\n\n    let num_harvester = filter('Harvester');\n    let num_builder = filter('Builder');\n    let num_upgrader = filter('Upgrader');\n    let num_repairer = filter('Repairer');\n    let num_carrier = filter('Carrier');\n    let num = {\n        num_harvester, num_builder, num_upgrader, num_repairer, num_carrier\n    };\n\n    const structre_site = Game.spawns['Spawn0'].room.find(FIND_CONSTRUCTION_SITES);\n\n    //-\n    //根据config生成creep\n    for (const key in role_config) {\n        let role = role_config[key];\n\n        if (getVerb(num, `num_${role.name}`).length < role.number) {\n            let index = Math.floor(Math.random() * 4);\n            if (role.name != 'builder') {\n\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\n            } else if (structre_site.length > 0) {\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\n\n            }\n        }\n    }\n    //生成creep的旧代码\n    //#region\n    // if (num_harvester.length < 3) {\n    //     let name = Math.floor(Math.random() * 4);\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, CARRY, MOVE], `harvester${name}`, { memory: { role: 'Harvester' } });\n    // }\n    // if (num_carrier.length < 1) {\n    //     let name = Math.floor(Math.random() * 4);\n    //     Game.spawns['Spawn0'].spawnCreep([CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE], `carrier${name}`, { memory: { role: 'Carrier' } });\n    // }\n    // //判断是否有施工工地需要生成builder\n    // if (structre_site.length) {\n    //     if (num_builder.length < 2) {\n    //         let name = Math.floor(Math.random() * 4);\n    //         Game.spawns['Spawn0'].spawnCreep([WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE], `builder${name}`, { memory: { role: 'Builder' } });\n    //     }\n    // }\n    // //\n    // if (num_repairer.length < 1) {\n    //     let name = Math.floor(Math.random() * 4);\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, CARRY, CARRY, MOVE, MOVE, MOVE], `repairer${name}`, { memory: { role: 'Repairer' } });\n    // }\n    // if (num_upgrader.length < 3) {\n    //     let name = Math.floor(Math.random() * 4);\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, WORK, WORK, CARRY, MOVE], `upgrader${name}`, { memory: { role: 'Upgrader' } });\n    // }\n\n    //判断harvester是否担任运输任务\n    let noCarrier = false;\n    if (num_carrier.length == 0 && Game.spawns['Spawn0'].room.energyAvailable <= 300) {\n        noCarrier = true;\n    }\n\n    //获取carrier对象数组\n    let carrierArrary = [];\n    for (const key in creeps) {\n        if (creeps[key].memory.role == 'Carrier') {\n            carrierArrary.push(creeps[key]);\n        }\n    }\n\n\n\n    //分配creep任务\n    for (const key in creeps) {\n        let _creep = creeps[key];\n        if (_creep.memory.role == 'Harvester') {\n            harvester.run({ _creep, noCarrier });\n            if (_creep.ticksToLive < 100)\n                _creep.say(_creep.ticksToLive);\n        }\n        if (_creep.memory.role == 'Builder') {\n            builder.run(_creep);\n            if (_creep.ticksToLive < 100)\n                _creep.say(_creep.ticksToLive);\n        }\n        if (_creep.memory.role == 'Upgrader') {\n            upgrader.run(_creep);\n            if (_creep.ticksToLive < 100)\n                _creep.say(_creep.ticksToLive);\n        }\n        if (_creep.memory.role == 'Repairer') {\n            repairer.run({ _creep, arr_repairer });\n            if (_creep.ticksToLive < 100)\n                _creep.say(_creep.ticksToLive);\n        }\n        if (_creep.memory.role == 'Carrier') {\n            carrier.run({ _creep, arr_carrier });\n            if (_creep.ticksToLive < 100)\n                _creep.say(_creep.ticksToLive);\n        }\n    }\n\n\n}"],"names":[],"mappings":"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"}