{"version":3,"file":"main.js","sources":["../src/harvest.js","../src/role.harvester.js","../src/withdraw.js","../src/role.builder.js","../src/role.upgrader.js","../src/assignTarget.js","../src/role.repairer.js","../src/role.carrier.js","../src/role.customer.js","../src/role.mineral.harvester.js","../src/role/role.attacker.js","../src/role.claimer.js","../src/Temporary/outHarvester.js","../src/structure.tower.js","../src/main.js"],"sourcesContent":["export const harvest = {\r\n\r\n    /** \r\n     * @param {*} _creep (必填)\r\n     * @param {Number} energy_index energy矿的序号 (选填)\r\n     * @param {Array} _target energy矿或mineral矿数组 (必填)\r\n     * @returns {Boolean}\r\n    */\r\n    // harvesting: true,\r\n    run: function ({ _creep, energy_index = 0, _target }) {\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n            //从工作状态到不工作状态\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n            //从不工作状态到工作状态\r\n        }\r\n\r\n        if (!_creep.memory.working) {\r\n            if (_creep.harvest(_target[energy_index]) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_target[energy_index], { visualizePahStyle: { stroke: '#fae16b', opacity: 1 } });\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}","import { harvest } from \"./harvest\";\r\n\r\n\r\nexport const harvester = {\r\n    /**\r\n     * @description 采集者\r\n     * @param {*} _creep \r\n     * @param {Object} _container 交互的container (必填)\r\n     * @param {Boolean} noCarrier 没有carrier了 (选填)\r\n     */\r\n    run: function ({ _creep, noCarrier, _container }) {\r\n\r\n        //需要energy的建筑物【arr】，并按照已有energy的递增排序---没有container时替换targets\r\n        const structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_EXTENSION ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_TOWER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n        //----------------------------------//\r\n\r\n        //所有energy矿【arr】\r\n        const source_energy = _creep.room.find(FIND_SOURCES);\r\n        //creep的targetIndex\r\n        let targetIndex = _creep.memory.targetIndex;\r\n        //所采集的矿对象\r\n        let o_energy = source_energy[targetIndex];\r\n        //所采集的矿的附近的container\r\n        let container_energy = _creep.room.lookForAtArea(LOOK_STRUCTURES, o_energy.pos.y - 2, o_energy.pos.x - 2, o_energy.pos.y + 2, o_energy.pos.x + 2, true).filter(item => item.structure.structureType == 'container');\r\n        let target = container_energy[0].structure;\r\n        //外部指定container\r\n        if (_container) {\r\n            target = _container;\r\n        }\r\n        //没有carrier后harvester开始运输\r\n        if (noCarrier) {\r\n            target = structure_energy[0];\r\n        }\r\n\r\n        //----------------------//\r\n        if (harvest.run({ _creep, _target: source_energy, energy_index: _creep.memory.targetIndex })) {\r\n            if (_creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(target, { visualizePahStyle: { stroke: '#fae16b', opacity: .6 } });\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\n//拿取energy\r\nexport const withdraw = {\r\n    /**\r\n     * @description 拿取\r\n     * @param {*} _creep \r\n     * @param {*} _container 拿取energy的对象 (选填)\r\n     * @param {Boolean} isStorage 是否是去storage拿能量 (选填)\r\n     * @param {*} _resource 拿取的resource种类\r\n     * @param {*} _resource 拿取的resource数量\r\n     * @returns {Boolean}\r\n     */\r\n    run: function ({ _creep, _container, _resource, _amount, isStorage }) {\r\n        /**\r\n         * @description 有energy的container建筑【arr】\r\n         * @param {Array} container_energy\r\n         */\r\n        let containers_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return item.structureType == STRUCTURE_CONTAINER && item.store.getUsedCapacity(RESOURCE_ENERGY) > 300;\r\n            }\r\n        });\r\n        /**\r\n         * @description 有k矿的container建筑【arr】\r\n         * @param {Array} container_mineral\r\n         */\r\n        let containers_mineral = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return item.structureType == STRUCTURE_CONTAINER && item.store.getUsedCapacity(RESOURCE_KEANIUM) > 300;\r\n            }\r\n        });\r\n\r\n        //掉落的energy【arr】\r\n        // const energy = _creep.room.find(FIND_DROPPED_RESOURCES);\r\n\r\n        /**\r\n         * @description  \r\n         * @param {boolean} noEnergy 判断container有没有energy,都没有为true\r\n         */\r\n        let noEnergy = false;//有energy为false\r\n        let noMineral = false;\r\n\r\n        noEnergy = containers_energy.every(element => {\r\n            return element.store.getUsedCapacity(RESOURCE_ENERGY) == 0;\r\n        });\r\n        //全都没有矿物为true\r\n        noMineral = containers_mineral.every(element => {\r\n            return element.store.getUsedCapacity(RESOURCE_KEANIUM) == 0;\r\n        });\r\n\r\n        //判断工作状态\r\n        if (_creep.memory.working && _creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = false;\r\n        } else if (!_creep.memory.working && _creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n            _creep.memory.working = true;\r\n        } else if ((_creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0 && noEnergy) || (_creep.store.getUsedCapacity(RESOURCE_KEANIUM) > 0 && noMineral)) {//自己身上有container没有能量\r\n            return true;\r\n            //container都空了而自身携带有一些\r\n        }\r\n\r\n        //if()\r\n        if (!_creep.memory.working) {\r\n            //customer//自定义拿取的目标\r\n            if (_container && _resource) {\r\n                if (_creep.withdraw(_container, _resource, _amount) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_container, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: 1\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            //拿取掉落的energy\r\n            //#region\r\n            // if (energy.length > 0) {\r\n            //     if (_creep.pickup(energy[0]) == ERR_NOT_IN_RANGE) {\r\n            //         _creep.moveTo(energy[0])\r\n            //     }\r\n            // }\r\n            //#endregion\r\n\r\n            //container有energy时拿取container的energy//10.31只有carrier能在container拿取\r\n            if (!noEnergy && _creep.memory.role == 'Carrier' && _creep.store.getFreeCapacity() > 0) {\r\n                if (_creep.withdraw(containers_energy[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers_energy[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: .3\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            //container没energy后有k拿取k\r\n            else if (!noMineral && _creep.memory.role == 'Carrier' && _creep.store.getFreeCapacity() > 0) {\r\n                if (_creep.withdraw(containers_mineral[0], RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(containers_mineral[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#906efa\",\r\n                            opacity: .3\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n\r\n            //container没有energy后拿取storage的energy(运输目标是storage时不执行)\r\n            //\r\n            else if (!isStorage && !_resource) {\r\n\r\n                //storage\r\n                let storage = _creep.room.find(FIND_STRUCTURES, {\r\n                    filter: item => item.structureType == STRUCTURE_STORAGE\r\n                });\r\n                storage = Game.rooms['W41S22'].storage;\r\n                if (_creep.withdraw(storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(storage, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#ffffff\",\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}","// const harvester = require('role.harvester');\r\nimport { harvest } from './harvest';\r\nimport { withdraw } from './withdraw';\r\nexport const builder = {\r\n    /**\r\n     * @description 建造者\r\n     * @param {*} _creep \r\n     */\r\n    run: function (_creep) {\r\n        // if (withdraw.run({ _creep })) {\r\n        //     /**\r\n        //      * @description 施工工地并按照所需energy的多少递增排序\r\n        //      */\r\n        //     // let construction = _creep.room.find(FIND_MY_CONSTRUCTION_SITES);\r\n        //     //所有房间的施工地\r\n        //     let construction = [];\r\n        //     for (const key in Game.rooms) {\r\n        //         construction.push(...Game.rooms[key].find(FIND_CONSTRUCTION_SITES))\r\n        //     }\r\n        //     // console.log(construction.length);\r\n        //     // construction = Game.rooms['W41S23'].find(FIND_CONSTRUCTION_SITES);\r\n        //     // construction.sort((a, b) => a.progressTotal - b.progressTotal);\r\n        //     if (construction.length) {\r\n        //         if (_creep.build(construction[0]) == ERR_NOT_IN_RANGE) {\r\n        //             _creep.moveTo(construction[0], {\r\n        //                 visualizePathStyle: {\r\n        //                     stroke: \"#23d08a\",\r\n        //                     opacity: .6\r\n        //                 }\r\n        //             });\r\n        //         }\r\n        //     }\r\n        // }\r\n        //@@@@@@@@@\r\n        if (harvest.run({ _creep, _target: Game.rooms['W41S23'].find(FIND_SOURCES_ACTIVE) })) {\r\n\r\n            let construction = [];\r\n            for (const key in Game.rooms) {\r\n                construction.push(...Game.rooms[key].find(FIND_CONSTRUCTION_SITES))\r\n            }\r\n            // console.log(construction.length);\r\n            // construction = Game.rooms['W41S23'].find(FIND_CONSTRUCTION_SITES);\r\n            // construction.sort((a, b) => a.progressTotal - b.progressTotal);\r\n            if (construction.length) {\r\n                if (_creep.build(construction[0]) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(construction[0], {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#23d08a\",\r\n                            opacity: .6\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = builder;","//升级controller\r\nimport { harvest } from './harvest';\r\nimport { withdraw } from './withdraw';\r\n\r\nexport const upgrader = {\r\n    run: function (_creep) {\r\n        //所有energy矿【arr】\r\n        const source_energy = _creep.room.find(FIND_SOURCES);\r\n\r\n        // if (harvest.run({ _creep, energy_index: 1, _target: source_energy })) {\r\n        //     if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n        //         _creep.moveTo(_creep.room.controller);\r\n        //     }\r\n        // }\r\n        if (withdraw.run({ _creep, _container: _creep.room.storage, _resource: RESOURCE_ENERGY })) {\r\n            if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_creep.room.controller);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// module.exports = upgrader;","//任务目标的分配，保证在完成前不会切换目标对象\r\nexport const assignTarget = {\r\n    /**\r\n     * @description 给不同的creep分配不同的目标对象\r\n     * @param {Array} targets structure_energy不working时的目标\r\n     * @param {Object} roleTarget  Memory.carryTarget目标index\r\n     * @param {Array} roleArr 相应的creep对象数组\r\n     */\r\n    run: function ({ roleTarget, roleArr, targets }) {\r\n\r\n        //判断目标任务是否完成一个\r\n        if (Memory[roleTarget] != targets[0].id) {\r\n            Memory[roleTarget] = targets[0].id;\r\n            // 只剩一个任务时\r\n            if (targets.length == 1) {\r\n                // _creep.memory.targetIndex = 0;\r\n                roleArr.forEach(element => {\r\n                    element.memory.targetIndex = 1;\r\n                });\r\n            } else {\r\n                // if (_creep == roleArr[1])\r\n                //任务超过一个后重新分配\r\n                if (roleArr.length > 1) {\r\n                    if (roleArr[0].memory.targetIndex == roleArr[1].memory.targetIndex) {\r\n                        roleArr[0].memory.targetIndex = 0;\r\n                        roleArr[1].memory.targetIndex = 1;\r\n                    }\r\n                }\r\n            }\r\n            //任务完成后切换下标保证不会改变原来的目标\r\n            for (const iterator of roleArr) {\r\n                iterator.switchTarget(iterator);\r\n            }\r\n        }\r\n    }\r\n}","import { withdraw } from './withdraw';\r\nimport { assignTarget } from './assignTarget';\r\n\r\nexport const repairer = {\r\n    run: function ({ _creep, arr_repairer }) {\r\n        if (withdraw.run({ _creep })) {\r\n\r\n            /**\r\n             *  @description 需要修复的建筑物(不包含wall)并按照hits递增排序\r\n             */\r\n            let targets = _creep.room.find(FIND_STRUCTURES, {\r\n                filter: object => {\r\n                    return object.hits < object.hitsMax && object.structureType != STRUCTURE_WALL;\r\n                }\r\n            });\r\n            if (targets.length != 0) {\r\n                //按照hits递增排序\r\n                targets.sort((a, b) => a.hits - b.hits);\r\n                //按照距离远近排序\r\n                targets.sort((a, b) => {\r\n                    return Math.sqrt((a.pos.x - _creep.pos.x) ** 2 + (a.pos.y - _creep.pos.y) ** 2) -\r\n                        Math.sqrt((b.pos.x - _creep.pos.x) ** 2 + (b.pos.y - _creep.pos.y) ** 2)\r\n                })\r\n            }\r\n            //没有targets后修复wall\r\n            if (targets.length == 0) {\r\n                targets = _creep.room.find(FIND_STRUCTURES, {\r\n                    filter: item => {\r\n                        return item.hits < item.hitsMax && item.structureType == STRUCTURE_WALL;\r\n                    }\r\n                });\r\n                targets.sort((a, b) => a.hits - b.hits);\r\n            }\r\n\r\n            //\r\n            if (targets.length > 0) {\r\n\r\n                // const creeps = Game.spawns['Spawn0'].room.find(FIND_CREEPS).filter(item => {\r\n                //     return item.memory.role == 'Repairer';\r\n                // });\r\n\r\n                //分配目标对象\r\n                assignTarget.run({ roleTarget: 'repairTarget', roleArr: arr_repairer, targets: targets });\r\n\r\n                //if()\r\n                if (_creep.repair(targets[_creep.memory.targetIndex]) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(targets[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#ac4b1e',\r\n                            opacity: .3\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// module.exports = repairer;","import { withdraw } from \"./withdraw\";\r\nimport { assignTarget } from \"./assignTarget\";\r\n\r\nexport const carrier = {\r\n    /**\r\n     * @description 运输者\r\n     * @param {*} _creep \r\n     * @param {Array} arr_carrier carrier角色的creep对象数组\r\n     */\r\n    run: function ({ _creep, arr_carrier }) {\r\n\r\n        //运输的目标是否是storage\r\n        let isStorage = false;\r\n\r\n        /**\r\n         * @description 需要energy的structure并按照已有的energy量递增排序\r\n         * @param {Array} structure_energy\r\n         */\r\n        let structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => {\r\n                return (item.structureType == STRUCTURE_EXTENSION ||\r\n                    item.structureType == STRUCTURE_SPAWN ||\r\n                    item.structureType == STRUCTURE_TOWER) &&\r\n                    item.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n            }\r\n        }).sort((a, b) => a.store.getCapacity(RESOURCE_ENERGY) - b.store.getCapacity(RESOURCE_ENERGY));\r\n\r\n\r\n        //creep所在的房间的storage\r\n        let storage = _creep.room.find(FIND_STRUCTURES, {\r\n            filter: item => item.structureType == STRUCTURE_STORAGE\r\n        });\r\n        // storage(建筑不需要资源后向storage运输resource)\r\n        if (structure_energy.length == 0) {\r\n            structure_energy = _creep.room.find(FIND_STRUCTURES, {\r\n                filter: item => item.structureType == STRUCTURE_STORAGE\r\n            });\r\n            isStorage = true;\r\n        }\r\n        //切换targetIndex，保证任务完成时不会改变其他creep的任务目标\r\n        assignTarget.run({ roleTarget: 'carryTarget', roleArr: arr_carrier, targets: structure_energy });\r\n\r\n        //#region\r\n        //判断目标任务是否完成一个\r\n        // if (Memory.carryTarget != structure_energy[0].id) {\r\n        //     Memory.carryTarget = structure_energy[0].id;\r\n        //     // 只剩一个任务时\r\n        //     if (structure_energy.length == 1) {\r\n        //         // _creep.memory.targetIndex = 0;\r\n        //         arr_carrier.forEach(element => {\r\n        //             element.memory.targetIndex = 1;\r\n        //         });\r\n        //     } else {\r\n        //         // if (_creep == arr_carrier[1])\r\n        //         //任务超过一个后重新分配\r\n        //         if (arr_carrier[0].memory.targetIndex == arr_carrier[1].memory.targetIndex) {\r\n        //             arr_carrier[0].memory.targetIndex = 0;\r\n        //             arr_carrier[1].memory.targetIndex = 1;\r\n        //         }\r\n        //     }\r\n        //     //任务完成后切换下标保证不会改变原来的目标\r\n        //     for (const iterator of arr_carrier) {\r\n        //         iterator.switchTarget(iterator);\r\n        //     }\r\n        // }\r\n        //#endregion\r\n\r\n        //if()\r\n        if (withdraw.run({ _creep, isStorage })) {\r\n            //携带有k就传送k到storage\r\n            if (_creep.store.getUsedCapacity(RESOURCE_KEANIUM) > 0) {\r\n                // for (const resourceType in _creep.carry) {\r\n                //根据creep自身的targetIndex选择目标\r\n                if (_creep.transfer(storage[_creep.memory.targetIndex], RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(storage[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#11a8cd',\r\n                            opacity: .6\r\n                        }\r\n                    })\r\n                }\r\n                // }\r\n            }\r\n            //传送energy到需要的structure\r\n            else {\r\n                if (_creep.transfer(structure_energy[_creep.memory.targetIndex], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(structure_energy[_creep.memory.targetIndex], {\r\n                        visualizePathStyle: {\r\n                            stroke: '#11a8cd',\r\n                            opacity: .6\r\n                        }\r\n                    });//根据距离排序\r\n                    structure_energy.sort((a, b) => {\r\n                        return Math.sqrt((a.pos.x - _creep.pos.x) ** 2 + (a.pos.y - _creep.pos.y) ** 2) -\r\n                            Math.sqrt((b.pos.x - _creep.pos.x) ** 2 + (b.pos.y - _creep.pos.y) ** 2)\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","import { withdraw } from './withdraw';\r\n\r\nexport const customer = {\r\n    /** \r\n     * @description 自定义creep\r\n     * @param {*} param0 \r\n     */\r\n    run: function ({ _creep, _target, _origin, _method, _resource, _amount }) {\r\n        if (withdraw.run({ _creep, _container: _origin, _resource, _amount })) {\r\n            for (const resourceType in _creep.carry) {\r\n                if (_creep[_method](_target, resourceType) == ERR_NOT_IN_RANGE) {\r\n                    _creep.moveTo(_target, {\r\n                        visualizePathStyle: {\r\n                            stroke: \"#000000\",\r\n                            opacity: 1\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { harvest } from \"./harvest\";\r\n\r\nexport const mineral_harvester = {\r\n    /**\r\n     * @_creep\r\n     * @param  {Array} _mineral 矿对象(可选)\r\n     * @param {Array} _container 存储矿的container(可选)\r\n     * @param {*} param0 \r\n     */\r\n    run: function ({ _creep, _mineral, _container }) {\r\n\r\n        //存放mineral的container\r\n        let container_k = _creep.room.lookForAt(LOOK_STRUCTURES, 39, 25).filter(item => {\r\n            return item.structureType == 'container';\r\n        });\r\n        // let containers = _creep.room.find(FIND_STRUCTURES, {\r\n        //     filter: item => {\r\n        //         return item.structureType == STRUCTURE_CONTAINER\r\n        //     }\r\n        // })\r\n        //获取mineral\r\n        let mineral;\r\n        if (!_mineral) {\r\n            mineral = _creep.room.find(FIND_MINERALS);\r\n        }\r\n        if (harvest.run({ _creep, _target: (_mineral || mineral) })) {\r\n            if (_creep.transfer(container_k[0], RESOURCE_KEANIUM) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(container_k[0], { visualizePahStyle: { stroke: '#fae16b', opacity: .6 } });\r\n            }\r\n        }\r\n    }\r\n}","export const attacker = {\r\n    run: function ({ _creep }) {\r\n        let enemies = _creep.room.find(FIND_HOSTILE_CREEPS);\r\n        if (!Game.creeps.attack) {\r\n            Game.spawns['Spawn0'].spawnCreep([ATTACK, ATTACK, MOVE, MOVE], 'attack');\r\n        }\r\n        if (Game.creeps.attack.attack(enemies[0]) == ERR_NOT_IN_RANGE) {\r\n            Game.creeps.attack.moveTo(enemies[0]);\r\n        }\r\n    }\r\n}","export const claimer = {\r\n    run: function ({ _creep }) {\r\n        // const creep = Game.creeps['claimer'];\r\n        //要占领的房间\r\n        const room = Game.rooms['W41S23'];\r\n        //如果不存在就前往房间\r\n        if (!room) {\r\n            _creep.moveTo(new RoomPosition(25, 25, 'W41S23'))\r\n        } else {\r\n            //已经进入新房间\r\n            if (_creep.claimController(room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(room.controller, {\r\n                    visualizePathStyle: {\r\n                        stroke: '#b99cfb',\r\n                        opacity: 1\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","//新房间采能量升级controller--外矿（能量）的开采\r\nimport { harvest } from \"../harvest\";\r\nexport const outHarvester = {\r\n    run: function ({ _creep, _room }) {\r\n        if (harvest.run({ _creep, _target: _room.find(FIND_SOURCES_ACTIVE) })) {\r\n            // if (_creep.transfer(Game.rooms['W41S22'].storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n            //     // _creep.moveTo(Game.rooms['W41S22'].storage, {\r\n            //     //     visualPathStyle: {\r\n            //     //         stroke: '#fbe679',\r\n            //     //         opacity: .3\r\n            //     //     }\r\n            //     // });\r\n            //     if (_creep.room.name == 'W41S23') {\r\n            //         _creep.moveByPath(Memory.W41S23_energyTotop);\r\n            //     } else {\r\n            //         _creep.moveTo(Game.rooms['W41S22'].storage, {\r\n            //             visualPathStyle: {\r\n            //                 stroke: '#fbe679',\r\n            //                 opacity: .3\r\n            //             }\r\n            //         });\r\n            //     }\r\n            //     //行动时修复道路\r\n            //     let road_repair = _creep.pos.findInRange(FIND_STRUCTURES, 3, {\r\n            //         filter: item => item.structureType == STRUCTURE_ROAD && item.hits < item.hitsMax\r\n            //     });\r\n            //     if (road_repair) {\r\n            //         _creep.repair(road_repair[0]);\r\n            //     }\r\n            // }\r\n            //\r\n            if (_creep.upgradeController(_creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                _creep.moveTo(_creep.room.controller, {\r\n                    visualPathStyle: {\r\n                        stroke: '#fbe679',\r\n                        opacity: .3\r\n                    }\r\n                });\r\n                let road_repair = _creep.pos.findInRange(FIND_STRUCTURES, 3, {\r\n                    filter: item => item.structureType == STRUCTURE_ROAD && item.hits < item.hitsMax\r\n                });\r\n                if (road_repair) {\r\n                    _creep.repair(road_repair[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","//tower\r\nexport const tower = {\r\n    /**\r\n     * \r\n     * @param {*} _structure \r\n     * @param {Number} _range \r\n     */\r\n    run: function (_structure, _range) {\r\n        if (_structure.store.getCapacity(RESOURCE_ENERGY) > 0) {\r\n            //敌人\r\n            const targets_attack = _structure.room.find(FIND_HOSTILE_CREEPS);\r\n            //需要治疗的creep\r\n            const targets_heal = _structure.pos.findInRange(FIND_CREEPS, _range, {\r\n                filter: item => {\r\n                    return item.body.hits < item.body.hitsMax;\r\n                }\r\n            });\r\n            //修复的建筑（不包含wall)\r\n            const targets_repair = _structure.pos.findInRange(FIND_STRUCTURES, _range, {\r\n                filter: item => {\r\n                    return item.hits < item.hitsMax && item.structureType != STRUCTURE_WALL && item.structureType == STRUCTURE_CONTAINER;\r\n                }\r\n            }).sort((a, b) => a.hits - b.hits);\r\n            //工作模式选择\r\n            if (targets_attack.length > 0) {\r\n                _structure.attack(targets_attack[0]);\r\n                // Game.notify('你被攻击了', 0);\r\n            }\r\n            //else if (targets_heal.length) {\r\n            //     _structure.heal(targets_heal[0]);\r\n            // }\r\n            else if (targets_repair.length) {\r\n                if (_structure.store.getFreeCapacity(RESOURCE_ENERGY) < 100) {\r\n                    _structure.repair(targets_repair[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * 全局统计信息扫描器\r\n * 负责搜集关于 cpu、memory、GCL、GPL 的相关信息\r\n */\r\nconst stateScanner = function () {\r\n    // 每 20 tick 运行一次\r\n    if (Game.time % 20) return;\r\n\r\n    if (!Memory.stats) Memory.stats = {};\r\n\r\n    // 统计 GCL / GPL 的升级百分比和等级\r\n    Memory.stats.gcl = (Game.gcl.progress / Game.gcl.progressTotal) * 100;\r\n    Memory.stats.gclLevel = Game.gcl.level;\r\n    Memory.stats.gpl = (Game.gpl.progress / Game.gpl.progressTotal) * 100;\r\n    Memory.stats.gplLevel = Game.gpl.level;\r\n    // CPU 的当前使用量\r\n    Memory.stats.cpu = Game.cpu.getUsed();\r\n    // bucket 当前剩余量\r\n    Memory.stats.bucket = Game.cpu.bucket;\r\n    //rcl\r\n    Memory.stats.rclPrgress = Game.rooms['W41S22'].controller.progress / Game.rooms['W41S22'].controller.progressTotal;\r\n\r\n}\r\n//-----------------------------------------------------------------------------------------------------------------------\r\n\r\n//role\r\nimport { harvester } from './role.harvester';\r\nimport { builder } from './role.builder';\r\nimport { upgrader } from './role.upgrader';\r\nimport { repairer } from './role.repairer';\r\nimport { carrier } from './role.carrier';\r\nimport { customer } from './role.customer';\r\nimport { mineral_harvester } from './role.mineral.harvester';\r\nimport { attacker } from './role/role.attacker';\r\n//扩张\r\nimport { claimer } from './role.claimer';\r\nimport { outHarvester } from './Temporary/outHarvester';\r\n// import { H_Cer } from './Temporary/H_Cer';\r\n//structure\r\nimport { tower } from './structure.tower';\r\n//config\r\nimport role_config from './creeps.config.json';\r\n//############################################################################\r\n// Game.property.logMarketHistory = function () {\r\n//     Game.market.outgoingTransactions()\r\n// }\r\n//############################################################################\r\n//判断任务队列是否改变-第一个任务完成\r\nMemory.carryTarget = \"\";\r\nMemory.repairTarget = \"\";\r\n\r\n//缓存的路径|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|/\\|\\/|\r\nlet path = [];\r\nif (Game.rooms['W41S23']) {\r\n    path = Game.rooms['W41S23'].findPath(new RoomPosition(35, 42, 'W41S23'), new RoomPosition(23, 0, 'W41S23'));\r\n    path = Room.serializePath(path);\r\n}\r\nMemory.W41S23_energyTotop = '3541111188888888888811111111111111181111211111';\r\n//\r\n//W41S22房间的矿\r\nlet mineral_k = Game.rooms['W41S22'].find(FIND_MINERALS);\r\n\r\n\r\n/**\r\n * 将字符串变为变量\r\n * @param {Object} obj 转变的字符串对象数组\r\n * @param {String} str 转变的字符串\r\n * @returns \r\n */\r\nfunction getVerb(obj, str) {\r\n    let arr = str.split('.');\r\n    while (arr.length) {\r\n        obj = obj[arr.shift()];\r\n    }\r\n    return obj;\r\n}\r\n\r\n//将身体部件字符串转化为变量\r\nfunction tov(str) {\r\n    let r = [];\r\n    for (const iterator of str) {\r\n        switch (iterator) {\r\n            case \"WORK\": r.push(WORK); break;\r\n            case \"CARRY\": r.push(CARRY); break;\r\n            case \"MOVE\": r.push(MOVE); break;\r\n            case \"ATTACK\": r.push(ATTACK); break;\r\n            case \"RANGED_ATTACK\": r.push(RANGED_ATTACK); break;\r\n            case \"HEAL\": r.push(HEAL); break;\r\n            case \"CLAIM\": r.push(CLAIM); break;\r\n            case \"TOUGH\": r.push(TOUGH); break;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n//原型方法>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n//原型-切换目标对象(self-role对象数组)\r\nCreep.prototype.switchTarget = function (self) {\r\n    if (self.memory.targetIndex == 0) {\r\n        self.memory.targetIndex += 1;\r\n    } else if (self.memory.targetIndex == 1) {\r\n        self.memory.targetIndex -= 1;\r\n    }\r\n    // console.log(1, self, self.memory.targetIndex);\r\n}\r\n//creep的被攻击发送生成attack方法\r\nCreep.prototype.wasAttacked = function ({ _creep }) {\r\n    if (_creep.hits < _creep.hitsMax) {\r\n        attacker.run({ _creep });\r\n    }\r\n}\r\n//判断是否creep个数改变了\r\nlet creepsL;\r\n\r\n//loop主函数-----------------------------------------------------------------------------------------------------------------------\r\nexport const loop = function () {\r\n    //兑换pielx\r\n    if (Game.cpu.bucket == 10000) {\r\n        Game.cpu.generatePixel();\r\n    }\r\n    let creeps = Game.creeps;\r\n    let structures = Game.structures;\r\n    //是否控制多个房间\r\n    let moreRoom = Object.keys(Game.rooms).length > 1 ? true : false;\r\n    //检索Memory删除没用的数据\r\n    for (const key in Memory.creeps) {\r\n        if (!creeps[key]) {\r\n            delete Memory.creeps[key]\r\n        }\r\n    }\r\n    //分配structure_tower任务\r\n    for (const key in structures) {\r\n        let structure = structures[key];\r\n        if (structure.structureType == STRUCTURE_TOWER) {\r\n            tower.run(structure, 15);\r\n        }\r\n    }\r\n    //统计不同类型creep的对象数组方法\r\n    function roleArray(role) {\r\n        let arr = [];\r\n        for (const key in creeps) {\r\n            if (creeps[key].memory.role == role) {\r\n                arr.push(creeps[key]);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    //分配不同目标对象时需要的role对象数组\r\n    let arr_harvester = roleArray('Harvester');\r\n    let arr_builder = roleArray('Builder');\r\n    let arr_upgrader = roleArray('Upgrader');\r\n    let arr_repairer = roleArray('Repairer');\r\n    let arr_carrier = roleArray('Carrier');\r\n\r\n    //统计不同种类creep的名字数组(用于数量计算)【arr】\r\n    function filter(role) {\r\n        return Object.keys(creeps).filter(item => {\r\n            return creeps[item].memory.role == role;\r\n        })\r\n    }\r\n    //增加role需要添加\r\n    let num_harvester = filter('Harvester');\r\n    let num_builder = filter('Builder');\r\n    let num_upgrader = filter('Upgrader');\r\n    let num_repairer = filter('Repairer');\r\n    let num_carrier = filter('Carrier');\r\n    let num_customer = filter('Customer');\r\n    let num_mineralharvester = filter('MineralHarvester');\r\n    let num_outharvester = filter('OutHarvester');\r\n    // let num_hcer = filter('HCer');\r\n    //+\r\n    let num = {\r\n        num_harvester, num_builder, num_upgrader, num_repairer,\r\n        num_carrier, num_customer, num_mineralharvester, num_outharvester,\r\n        // num_hcer\r\n    };\r\n    //所有房间的施工地\r\n    let structure_site_all = [];\r\n    for (const key in Game.rooms) {\r\n        structure_site_all.push(...Game.rooms[key].find(FIND_CONSTRUCTION_SITES))\r\n    }\r\n\r\n    //生成新creep完成时执行，分配targetIndex\r\n    if (Object.keys(creeps).length != creepsL) {\r\n        creepsL = Object.keys(creeps).length;\r\n        //生成新的harvester时给所有harester分配index\r\n        // if (role.name == 'carrier') {\r\n        //获取最新的harvester对象数组\r\n        let new_arr_harvester = roleArray('Harvester');\r\n        //给harvester分配targetIndex\r\n        for (const index in arr_harvester) {\r\n            new_arr_harvester[index].memory.targetIndex = index % 2;\r\n        }\r\n        // }\r\n    }\r\n    //根据config生成新creep\r\n    for (const key in role_config) {\r\n        let role = role_config[key];\r\n        if (getVerb(num, `num_${role.name}`).length < role.number) {\r\n            let index = Math.floor(Math.random() * 10);\r\n            //建造-有施工地时孵化\r\n            if (structure_site_all.length > 0 && role.name == 'builder') {\r\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n            }\r\n            //采矿-矿有资源时孵化\r\n            else if (role.name == 'mineralharvester' && mineral_k[0].mineralAmount > 0) {\r\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n            }\r\n            //外能量-有外房间时孵化\r\n            else if (moreRoom && role.name == 'outharvester') {\r\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n            }\r\n            //外房运输energy-有外房间时孵化\r\n            else if (role.name == 'hcer' && moreRoom) {\r\n                // Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n                // Game.spawns['Spawn_W41S23'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n            }\r\n            //除建筑/采矿/外能量\r\n            else if (role.name != 'builder' && role.name != 'mineralharvester' && role.name != 'outharvester') {\r\n                Game.spawns['Spawn0'].spawnCreep(tov(role.body), `${role.name}${index}`, { memory: role.memory });\r\n\r\n            }\r\n        }\r\n    }\r\n    // }\r\n    //生成creep的旧代码\r\n    //#region\r\n    // if (num_harvester.length < 3) {\r\n    //     let name = Math.floor(Math.random() * 4);\r\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, CARRY, MOVE], `harvester${name}`, { memory: { role: 'Harvester' } });\r\n    // }\r\n    // if (num_carrier.length < 1) {\r\n    //     let name = Math.floor(Math.random() * 4);\r\n    //     Game.spawns['Spawn0'].spawnCreep([CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE], `carrier${name}`, { memory: { role: 'Carrier' } });\r\n    // }\r\n    // //判断是否有施工工地需要生成builder\r\n    // if (structre_site.length) {\r\n    //     if (num_builder.length < 2) {\r\n    //         let name = Math.floor(Math.random() * 4);\r\n    //         Game.spawns['Spawn0'].spawnCreep([WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE], `builder${name}`, { memory: { role: 'Builder' } });\r\n    //     }\r\n    // }\r\n    // //\r\n    // if (num_repairer.length < 1) {\r\n    //     let name = Math.floor(Math.random() * 4);\r\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, CARRY, CARRY, MOVE, MOVE, MOVE], `repairer${name}`, { memory: { role: 'Repairer' } });\r\n    // }\r\n    // if (num_upgrader.length < 3) {\r\n    //     let name = Math.floor(Math.random() * 4);\r\n    //     Game.spawns['Spawn0'].spawnCreep([WORK, WORK, WORK, CARRY, MOVE], `upgrader${name}`, { memory: { role: 'Upgrader' } });\r\n    // }\r\n    //#endregion\r\n    //判断harvester是否担任运输任务\r\n    let noCarrier = false;\r\n    if (num_carrier.length == 0 && Game.spawns['Spawn0'].room.energyAvailable <= 300) {\r\n        noCarrier = true;\r\n    }\r\n\r\n    //分配creep任务\r\n    for (const key in creeps) {\r\n        let _creep = creeps[key];\r\n        //自身检查是否被攻击了并发出孵化attack指令\r\n        _creep.wasAttacked({ _creep });\r\n\r\n        //\r\n        switch (_creep.memory.role) {\r\n            case 'Harvester': {\r\n                harvester.run({ _creep, noCarrier });\r\n            }; break;\r\n            case 'Builder': {\r\n                builder.run(_creep);\r\n            }; break\r\n            case 'Upgrader': {\r\n                upgrader.run(_creep);\r\n            }; break\r\n            case 'Repairer': {\r\n                repairer.run({ _creep, arr_repairer });\r\n            }; break;\r\n            case 'Carrier': {\r\n                carrier.run({ _creep, arr_carrier });\r\n            }; break;\r\n            case 'MineralHarvester': {\r\n                mineral_harvester.run({ _creep, _mineral: mineral_k });\r\n            }; break;\r\n            //自定义\r\n            case 'Customer': {\r\n                customer.run({\r\n                    _creep,\r\n                    _target: _creep.room.terminal,\r\n                    _origin: _creep.room.storage,\r\n                    _method: 'transfer',\r\n                    _resource: RESOURCE_KEANIUM,\r\n                    //大于容量会停止widthdraw\r\n                    _amount: 50\r\n                });\r\n            }; break;\r\n\r\n            //扩张\r\n            case 'Claimer': {\r\n                claimer.run({ _creep });\r\n            }; break;\r\n            case 'OutHarvester': {\r\n                outHarvester.run({ _creep, _room: Game.rooms['W41S23'] });\r\n            }; break;\r\n            // case 'HCer': {\r\n            //     H_Cer.run({ _creep, _room: Game.rooms['W41S23'] });\r\n            // }\r\n\r\n            //\r\n            default:\r\n                break;\r\n        }\r\n        //存活时间小于10显示气泡\r\n        if (_creep.ticksToLive < 10)\r\n            _creep.say(_creep.ticksToLive);\r\n        //\r\n        //#region\r\n        // if (_creep.memory.role == 'Harvester') {\r\n        //     harvester.run({ _creep, noCarrier });\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Builder') {\r\n        //     builder.run(_creep);\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Upgrader') {\r\n        //     upgrader.run(_creep);\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Repairer') {\r\n        //     repairer.run({ _creep, arr_repairer });\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Carrier') {\r\n        //     carrier.run({ _creep, arr_carrier });\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Customer') {\r\n        //     customer.run({ _creep, _target: _creep.room.controller, _origin: _creep.room.storage, _method: 'upgradeController' });\r\n\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'MineralHarvester') {\r\n        //     mineral_harvester.run({ _creep, _mineral: mineral_k });\r\n        //     if (_creep.ticksToLive < 100)\r\n        //         _creep.say(_creep.ticksToLive);\r\n        // }\r\n        // if (_creep.memory.role == 'Claimer') {\r\n        //     claimer.run({ _creep });\r\n        // }\r\n        // if (moreRoom) {\r\n        //     if (_creep.memory.role == 'OutHarvester') {\r\n        //         outHarvester.run({ _creep, _room: Game.rooms['W41S23'] });\r\n        //     }\r\n        // }\r\n        //#endregion\r\n    }\r\n    // Game.spawns['Spawn0'].spawnCreep([WORK,CARRY,MOVE], 'Customer', { memory: { role: 'Customer' } });\r\n    stateScanner();\r\n}"],"names":[],"mappings":"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"}